directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type File implements Node {
  id: ID!
  xid: String!
  path: String!
  originalName: String!
  normalizedName: String!
  checksum: String!
  sizeBytes: Int!
  mimeType: String
  format: String
  source: String!
  quarantine: Boolean!
  game: Game!
}
"""
A connection to a list of items.
"""
type FileConnection {
  """
  A list of edges.
  """
  edges: [FileEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type FileEdge {
  """
  The item at the end of the edge.
  """
  node: File
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type Game implements Node {
  id: ID!
  xid: String!
  slug: String!
  platform: GamePlatform!
  title: String!
  year: Int
  publisher: String
  developer: String
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FileConnection!
  images(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ImageConnection!
}
"""
A connection to a list of items.
"""
type GameConnection {
  """
  A list of edges.
  """
  edges: [GameEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type GameEdge {
  """
  The item at the end of the edge.
  """
  node: Game
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
GamePlatform is enum for the field platform
"""
enum GamePlatform @goModel(model: "github.com/deicod/archivedgames/ent/game.Platform") {
  C64
  AMIGA
  DOS
}
type Image implements Node {
  id: ID!
  xid: String!
  kind: ImageKind!
  position: Int!
  s3Key: String!
  width: Int!
  height: Int!
  game: Game!
}
"""
A connection to a list of items.
"""
type ImageConnection {
  """
  A list of edges.
  """
  edges: [ImageEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ImageEdge {
  """
  The item at the end of the edge.
  """
  node: Image
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ImageKind is enum for the field kind
"""
enum ImageKind @goModel(model: "github.com/deicod/archivedgames/ent/image.Kind") {
  COVER
  GALLERY
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/deicod/archivedgames/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FileConnection!
  games(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GameConnection!
}
type SiteSetting implements Node {
  id: ID!
  key: String!
  value: RawMessage
  public: Boolean!
}
type UserShadow implements Node {
  id: ID!
  xid: String!
  keycloakSub: String!
  handle: String
  displayName: String
}
