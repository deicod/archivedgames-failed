directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type File implements Node {
  id: ID!
  path: String!
  originalName: String!
  normalizedName: String!
  setKey: String
  checksum: String!
  sizeBytes: Int!
  mimeType: String
  format: String
  source: String!
  quarantine: Boolean!
  needsReview: Boolean!
  diskNumber: Int
  side: String
  game: Game!
}
"""
A connection to a list of items.
"""
type FileConnection {
  """
  A list of edges.
  """
  edges: [FileEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type FileEdge {
  """
  The item at the end of the edge.
  """
  node: File
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
FileWhereInput is used for filtering File objects.
Input was generated by ent.
"""
input FileWhereInput {
  not: FileWhereInput
  and: [FileWhereInput!]
  or: [FileWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  path field predicates
  """
  path: String
  pathNEQ: String
  pathIn: [String!]
  pathNotIn: [String!]
  pathGT: String
  pathGTE: String
  pathLT: String
  pathLTE: String
  pathContains: String
  pathHasPrefix: String
  pathHasSuffix: String
  pathEqualFold: String
  pathContainsFold: String
  """
  original_name field predicates
  """
  originalName: String
  originalNameNEQ: String
  originalNameIn: [String!]
  originalNameNotIn: [String!]
  originalNameGT: String
  originalNameGTE: String
  originalNameLT: String
  originalNameLTE: String
  originalNameContains: String
  originalNameHasPrefix: String
  originalNameHasSuffix: String
  originalNameEqualFold: String
  originalNameContainsFold: String
  """
  normalized_name field predicates
  """
  normalizedName: String
  normalizedNameNEQ: String
  normalizedNameIn: [String!]
  normalizedNameNotIn: [String!]
  normalizedNameGT: String
  normalizedNameGTE: String
  normalizedNameLT: String
  normalizedNameLTE: String
  normalizedNameContains: String
  normalizedNameHasPrefix: String
  normalizedNameHasSuffix: String
  normalizedNameEqualFold: String
  normalizedNameContainsFold: String
  """
  set_key field predicates
  """
  setKey: String
  setKeyNEQ: String
  setKeyIn: [String!]
  setKeyNotIn: [String!]
  setKeyGT: String
  setKeyGTE: String
  setKeyLT: String
  setKeyLTE: String
  setKeyContains: String
  setKeyHasPrefix: String
  setKeyHasSuffix: String
  setKeyIsNil: Boolean
  setKeyNotNil: Boolean
  setKeyEqualFold: String
  setKeyContainsFold: String
  """
  checksum field predicates
  """
  checksum: String
  checksumNEQ: String
  checksumIn: [String!]
  checksumNotIn: [String!]
  checksumGT: String
  checksumGTE: String
  checksumLT: String
  checksumLTE: String
  checksumContains: String
  checksumHasPrefix: String
  checksumHasSuffix: String
  checksumEqualFold: String
  checksumContainsFold: String
  """
  size_bytes field predicates
  """
  sizeBytes: Int
  sizeBytesNEQ: Int
  sizeBytesIn: [Int!]
  sizeBytesNotIn: [Int!]
  sizeBytesGT: Int
  sizeBytesGTE: Int
  sizeBytesLT: Int
  sizeBytesLTE: Int
  """
  mime_type field predicates
  """
  mimeType: String
  mimeTypeNEQ: String
  mimeTypeIn: [String!]
  mimeTypeNotIn: [String!]
  mimeTypeGT: String
  mimeTypeGTE: String
  mimeTypeLT: String
  mimeTypeLTE: String
  mimeTypeContains: String
  mimeTypeHasPrefix: String
  mimeTypeHasSuffix: String
  mimeTypeIsNil: Boolean
  mimeTypeNotNil: Boolean
  mimeTypeEqualFold: String
  mimeTypeContainsFold: String
  """
  format field predicates
  """
  format: String
  formatNEQ: String
  formatIn: [String!]
  formatNotIn: [String!]
  formatGT: String
  formatGTE: String
  formatLT: String
  formatLTE: String
  formatContains: String
  formatHasPrefix: String
  formatHasSuffix: String
  formatIsNil: Boolean
  formatNotNil: Boolean
  formatEqualFold: String
  formatContainsFold: String
  """
  source field predicates
  """
  source: String
  sourceNEQ: String
  sourceIn: [String!]
  sourceNotIn: [String!]
  sourceGT: String
  sourceGTE: String
  sourceLT: String
  sourceLTE: String
  sourceContains: String
  sourceHasPrefix: String
  sourceHasSuffix: String
  sourceEqualFold: String
  sourceContainsFold: String
  """
  quarantine field predicates
  """
  quarantine: Boolean
  quarantineNEQ: Boolean
  """
  needs_review field predicates
  """
  needsReview: Boolean
  needsReviewNEQ: Boolean
  """
  disk_number field predicates
  """
  diskNumber: Int
  diskNumberNEQ: Int
  diskNumberIn: [Int!]
  diskNumberNotIn: [Int!]
  diskNumberGT: Int
  diskNumberGTE: Int
  diskNumberLT: Int
  diskNumberLTE: Int
  diskNumberIsNil: Boolean
  diskNumberNotNil: Boolean
  """
  side field predicates
  """
  side: String
  sideNEQ: String
  sideIn: [String!]
  sideNotIn: [String!]
  sideGT: String
  sideGTE: String
  sideLT: String
  sideLTE: String
  sideContains: String
  sideHasPrefix: String
  sideHasSuffix: String
  sideIsNil: Boolean
  sideNotNil: Boolean
  sideEqualFold: String
  sideContainsFold: String
  """
  game edge predicates
  """
  hasGame: Boolean
  hasGameWith: [GameWhereInput!]
}
type Game implements Node {
  id: ID!
  slug: String!
  platform: GamePlatform!
  title: String!
  year: Int
  publisher: String
  developer: String
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Files returned from the connection.
    """
    where: FileWhereInput
  ): FileConnection!
  images(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Images returned from the connection.
    """
    where: ImageWhereInput
  ): ImageConnection!
}
"""
A connection to a list of items.
"""
type GameConnection {
  """
  A list of edges.
  """
  edges: [GameEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type GameEdge {
  """
  The item at the end of the edge.
  """
  node: Game
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
GamePlatform is enum for the field platform
"""
enum GamePlatform @goModel(model: "github.com/deicod/archivedgames/ent/game.Platform") {
  C64
  AMIGA
  DOS
}
"""
GameWhereInput is used for filtering Game objects.
Input was generated by ent.
"""
input GameWhereInput {
  not: GameWhereInput
  and: [GameWhereInput!]
  or: [GameWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugEqualFold: String
  slugContainsFold: String
  """
  platform field predicates
  """
  platform: GamePlatform
  platformNEQ: GamePlatform
  platformIn: [GamePlatform!]
  platformNotIn: [GamePlatform!]
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  year field predicates
  """
  year: Int
  yearNEQ: Int
  yearIn: [Int!]
  yearNotIn: [Int!]
  yearGT: Int
  yearGTE: Int
  yearLT: Int
  yearLTE: Int
  yearIsNil: Boolean
  yearNotNil: Boolean
  """
  publisher field predicates
  """
  publisher: String
  publisherNEQ: String
  publisherIn: [String!]
  publisherNotIn: [String!]
  publisherGT: String
  publisherGTE: String
  publisherLT: String
  publisherLTE: String
  publisherContains: String
  publisherHasPrefix: String
  publisherHasSuffix: String
  publisherIsNil: Boolean
  publisherNotNil: Boolean
  publisherEqualFold: String
  publisherContainsFold: String
  """
  developer field predicates
  """
  developer: String
  developerNEQ: String
  developerIn: [String!]
  developerNotIn: [String!]
  developerGT: String
  developerGTE: String
  developerLT: String
  developerLTE: String
  developerContains: String
  developerHasPrefix: String
  developerHasSuffix: String
  developerIsNil: Boolean
  developerNotNil: Boolean
  developerEqualFold: String
  developerContainsFold: String
  """
  files edge predicates
  """
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
  """
  images edge predicates
  """
  hasImages: Boolean
  hasImagesWith: [ImageWhereInput!]
}
type Image implements Node {
  id: ID!
  kind: ImageKind!
  position: Int!
  s3Key: String!
  width: Int!
  height: Int!
  game: Game!
}
"""
A connection to a list of items.
"""
type ImageConnection {
  """
  A list of edges.
  """
  edges: [ImageEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ImageEdge {
  """
  The item at the end of the edge.
  """
  node: Image
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ImageKind is enum for the field kind
"""
enum ImageKind @goModel(model: "github.com/deicod/archivedgames/ent/image.Kind") {
  COVER
  GALLERY
}
"""
ImageWhereInput is used for filtering Image objects.
Input was generated by ent.
"""
input ImageWhereInput {
  not: ImageWhereInput
  and: [ImageWhereInput!]
  or: [ImageWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  kind field predicates
  """
  kind: ImageKind
  kindNEQ: ImageKind
  kindIn: [ImageKind!]
  kindNotIn: [ImageKind!]
  """
  position field predicates
  """
  position: Int
  positionNEQ: Int
  positionIn: [Int!]
  positionNotIn: [Int!]
  positionGT: Int
  positionGTE: Int
  positionLT: Int
  positionLTE: Int
  """
  s3_key field predicates
  """
  s3Key: String
  s3KeyNEQ: String
  s3KeyIn: [String!]
  s3KeyNotIn: [String!]
  s3KeyGT: String
  s3KeyGTE: String
  s3KeyLT: String
  s3KeyLTE: String
  s3KeyContains: String
  s3KeyHasPrefix: String
  s3KeyHasSuffix: String
  s3KeyEqualFold: String
  s3KeyContainsFold: String
  """
  width field predicates
  """
  width: Int
  widthNEQ: Int
  widthIn: [Int!]
  widthNotIn: [Int!]
  widthGT: Int
  widthGTE: Int
  widthLT: Int
  widthLTE: Int
  """
  height field predicates
  """
  height: Int
  heightNEQ: Int
  heightIn: [Int!]
  heightNotIn: [Int!]
  heightGT: Int
  heightGTE: Int
  heightLT: Int
  heightLTE: Int
  """
  game edge predicates
  """
  hasGame: Boolean
  hasGameWith: [GameWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/deicod/archivedgames/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Files returned from the connection.
    """
    where: FileWhereInput
  ): FileConnection!
  games(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Games returned from the connection.
    """
    where: GameWhereInput
  ): GameConnection!
  reports: [Report!]!
}
type Report implements Node {
  id: ID!
  subjectType: String!
  subjectID: String!
  reporterID: String
  reason: String!
  note: String
  status: ReportStatus!
}
"""
ReportStatus is enum for the field status
"""
enum ReportStatus @goModel(model: "github.com/deicod/archivedgames/ent/report.Status") {
  OPEN
  TRIAGED
  ACTIONED
  REJECTED
}
"""
ReportWhereInput is used for filtering Report objects.
Input was generated by ent.
"""
input ReportWhereInput {
  not: ReportWhereInput
  and: [ReportWhereInput!]
  or: [ReportWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  subject_type field predicates
  """
  subjectType: String
  subjectTypeNEQ: String
  subjectTypeIn: [String!]
  subjectTypeNotIn: [String!]
  subjectTypeGT: String
  subjectTypeGTE: String
  subjectTypeLT: String
  subjectTypeLTE: String
  subjectTypeContains: String
  subjectTypeHasPrefix: String
  subjectTypeHasSuffix: String
  subjectTypeEqualFold: String
  subjectTypeContainsFold: String
  """
  subject_id field predicates
  """
  subjectID: String
  subjectIDNEQ: String
  subjectIDIn: [String!]
  subjectIDNotIn: [String!]
  subjectIDGT: String
  subjectIDGTE: String
  subjectIDLT: String
  subjectIDLTE: String
  subjectIDContains: String
  subjectIDHasPrefix: String
  subjectIDHasSuffix: String
  subjectIDEqualFold: String
  subjectIDContainsFold: String
  """
  reporter_id field predicates
  """
  reporterID: String
  reporterIDNEQ: String
  reporterIDIn: [String!]
  reporterIDNotIn: [String!]
  reporterIDGT: String
  reporterIDGTE: String
  reporterIDLT: String
  reporterIDLTE: String
  reporterIDContains: String
  reporterIDHasPrefix: String
  reporterIDHasSuffix: String
  reporterIDIsNil: Boolean
  reporterIDNotNil: Boolean
  reporterIDEqualFold: String
  reporterIDContainsFold: String
  """
  reason field predicates
  """
  reason: String
  reasonNEQ: String
  reasonIn: [String!]
  reasonNotIn: [String!]
  reasonGT: String
  reasonGTE: String
  reasonLT: String
  reasonLTE: String
  reasonContains: String
  reasonHasPrefix: String
  reasonHasSuffix: String
  reasonEqualFold: String
  reasonContainsFold: String
  """
  note field predicates
  """
  note: String
  noteNEQ: String
  noteIn: [String!]
  noteNotIn: [String!]
  noteGT: String
  noteGTE: String
  noteLT: String
  noteLTE: String
  noteContains: String
  noteHasPrefix: String
  noteHasSuffix: String
  noteIsNil: Boolean
  noteNotNil: Boolean
  noteEqualFold: String
  noteContainsFold: String
  """
  status field predicates
  """
  status: ReportStatus
  statusNEQ: ReportStatus
  statusIn: [ReportStatus!]
  statusNotIn: [ReportStatus!]
}
type SiteSetting implements Node {
  id: ID!
  key: String!
  value: RawMessage
  public: Boolean!
}
"""
SiteSettingWhereInput is used for filtering SiteSetting objects.
Input was generated by ent.
"""
input SiteSettingWhereInput {
  not: SiteSettingWhereInput
  and: [SiteSettingWhereInput!]
  or: [SiteSettingWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  key field predicates
  """
  key: String
  keyNEQ: String
  keyIn: [String!]
  keyNotIn: [String!]
  keyGT: String
  keyGTE: String
  keyLT: String
  keyLTE: String
  keyContains: String
  keyHasPrefix: String
  keyHasSuffix: String
  keyEqualFold: String
  keyContainsFold: String
  """
  public field predicates
  """
  public: Boolean
  publicNEQ: Boolean
}
type UserShadow implements Node {
  id: ID!
  keycloakSub: String!
  handle: String
  displayName: String
}
"""
UserShadowWhereInput is used for filtering UserShadow objects.
Input was generated by ent.
"""
input UserShadowWhereInput {
  not: UserShadowWhereInput
  and: [UserShadowWhereInput!]
  or: [UserShadowWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  keycloak_sub field predicates
  """
  keycloakSub: String
  keycloakSubNEQ: String
  keycloakSubIn: [String!]
  keycloakSubNotIn: [String!]
  keycloakSubGT: String
  keycloakSubGTE: String
  keycloakSubLT: String
  keycloakSubLTE: String
  keycloakSubContains: String
  keycloakSubHasPrefix: String
  keycloakSubHasSuffix: String
  keycloakSubEqualFold: String
  keycloakSubContainsFold: String
  """
  handle field predicates
  """
  handle: String
  handleNEQ: String
  handleIn: [String!]
  handleNotIn: [String!]
  handleGT: String
  handleGTE: String
  handleLT: String
  handleLTE: String
  handleContains: String
  handleHasPrefix: String
  handleHasSuffix: String
  handleIsNil: Boolean
  handleNotNil: Boolean
  handleEqualFold: String
  handleContainsFold: String
  """
  display_name field predicates
  """
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameIsNil: Boolean
  displayNameNotNil: Boolean
  displayNameEqualFold: String
  displayNameContainsFold: String
}
