// Code generated by ent, DO NOT EDIT.

package comment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/deicod/archivedgames/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldID, id))
}

// SubjectType applies equality check predicate on the "subject_type" field. It's identical to SubjectTypeEQ.
func SubjectType(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldSubjectType, v))
}

// SubjectID applies equality check predicate on the "subject_id" field. It's identical to SubjectIDEQ.
func SubjectID(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldSubjectID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUserID, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldLanguage, v))
}

// ContentSanitized applies equality check predicate on the "content_sanitized" field. It's identical to ContentSanitizedEQ.
func ContentSanitized(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldContentSanitized, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldCreatedAt, v))
}

// EditedAt applies equality check predicate on the "edited_at" field. It's identical to EditedAtEQ.
func EditedAt(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldEditedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldDeletedAt, v))
}

// SubjectTypeEQ applies the EQ predicate on the "subject_type" field.
func SubjectTypeEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldSubjectType, v))
}

// SubjectTypeNEQ applies the NEQ predicate on the "subject_type" field.
func SubjectTypeNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldSubjectType, v))
}

// SubjectTypeIn applies the In predicate on the "subject_type" field.
func SubjectTypeIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldSubjectType, vs...))
}

// SubjectTypeNotIn applies the NotIn predicate on the "subject_type" field.
func SubjectTypeNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldSubjectType, vs...))
}

// SubjectTypeGT applies the GT predicate on the "subject_type" field.
func SubjectTypeGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldSubjectType, v))
}

// SubjectTypeGTE applies the GTE predicate on the "subject_type" field.
func SubjectTypeGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldSubjectType, v))
}

// SubjectTypeLT applies the LT predicate on the "subject_type" field.
func SubjectTypeLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldSubjectType, v))
}

// SubjectTypeLTE applies the LTE predicate on the "subject_type" field.
func SubjectTypeLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldSubjectType, v))
}

// SubjectTypeContains applies the Contains predicate on the "subject_type" field.
func SubjectTypeContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldSubjectType, v))
}

// SubjectTypeHasPrefix applies the HasPrefix predicate on the "subject_type" field.
func SubjectTypeHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldSubjectType, v))
}

// SubjectTypeHasSuffix applies the HasSuffix predicate on the "subject_type" field.
func SubjectTypeHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldSubjectType, v))
}

// SubjectTypeEqualFold applies the EqualFold predicate on the "subject_type" field.
func SubjectTypeEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldSubjectType, v))
}

// SubjectTypeContainsFold applies the ContainsFold predicate on the "subject_type" field.
func SubjectTypeContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldSubjectType, v))
}

// SubjectIDEQ applies the EQ predicate on the "subject_id" field.
func SubjectIDEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldSubjectID, v))
}

// SubjectIDNEQ applies the NEQ predicate on the "subject_id" field.
func SubjectIDNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldSubjectID, v))
}

// SubjectIDIn applies the In predicate on the "subject_id" field.
func SubjectIDIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldSubjectID, vs...))
}

// SubjectIDNotIn applies the NotIn predicate on the "subject_id" field.
func SubjectIDNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldSubjectID, vs...))
}

// SubjectIDGT applies the GT predicate on the "subject_id" field.
func SubjectIDGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldSubjectID, v))
}

// SubjectIDGTE applies the GTE predicate on the "subject_id" field.
func SubjectIDGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldSubjectID, v))
}

// SubjectIDLT applies the LT predicate on the "subject_id" field.
func SubjectIDLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldSubjectID, v))
}

// SubjectIDLTE applies the LTE predicate on the "subject_id" field.
func SubjectIDLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldSubjectID, v))
}

// SubjectIDContains applies the Contains predicate on the "subject_id" field.
func SubjectIDContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldSubjectID, v))
}

// SubjectIDHasPrefix applies the HasPrefix predicate on the "subject_id" field.
func SubjectIDHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldSubjectID, v))
}

// SubjectIDHasSuffix applies the HasSuffix predicate on the "subject_id" field.
func SubjectIDHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldSubjectID, v))
}

// SubjectIDEqualFold applies the EqualFold predicate on the "subject_id" field.
func SubjectIDEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldSubjectID, v))
}

// SubjectIDContainsFold applies the ContainsFold predicate on the "subject_id" field.
func SubjectIDContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldSubjectID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldUserID, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageIsNil applies the IsNil predicate on the "language" field.
func LanguageIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldLanguage))
}

// LanguageNotNil applies the NotNil predicate on the "language" field.
func LanguageNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldLanguage))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldLanguage, v))
}

// ContentSanitizedEQ applies the EQ predicate on the "content_sanitized" field.
func ContentSanitizedEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldContentSanitized, v))
}

// ContentSanitizedNEQ applies the NEQ predicate on the "content_sanitized" field.
func ContentSanitizedNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldContentSanitized, v))
}

// ContentSanitizedIn applies the In predicate on the "content_sanitized" field.
func ContentSanitizedIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldContentSanitized, vs...))
}

// ContentSanitizedNotIn applies the NotIn predicate on the "content_sanitized" field.
func ContentSanitizedNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldContentSanitized, vs...))
}

// ContentSanitizedGT applies the GT predicate on the "content_sanitized" field.
func ContentSanitizedGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldContentSanitized, v))
}

// ContentSanitizedGTE applies the GTE predicate on the "content_sanitized" field.
func ContentSanitizedGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldContentSanitized, v))
}

// ContentSanitizedLT applies the LT predicate on the "content_sanitized" field.
func ContentSanitizedLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldContentSanitized, v))
}

// ContentSanitizedLTE applies the LTE predicate on the "content_sanitized" field.
func ContentSanitizedLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldContentSanitized, v))
}

// ContentSanitizedContains applies the Contains predicate on the "content_sanitized" field.
func ContentSanitizedContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldContentSanitized, v))
}

// ContentSanitizedHasPrefix applies the HasPrefix predicate on the "content_sanitized" field.
func ContentSanitizedHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldContentSanitized, v))
}

// ContentSanitizedHasSuffix applies the HasSuffix predicate on the "content_sanitized" field.
func ContentSanitizedHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldContentSanitized, v))
}

// ContentSanitizedEqualFold applies the EqualFold predicate on the "content_sanitized" field.
func ContentSanitizedEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldContentSanitized, v))
}

// ContentSanitizedContainsFold applies the ContainsFold predicate on the "content_sanitized" field.
func ContentSanitizedContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldContentSanitized, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldCreatedAt, v))
}

// EditedAtEQ applies the EQ predicate on the "edited_at" field.
func EditedAtEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldEditedAt, v))
}

// EditedAtNEQ applies the NEQ predicate on the "edited_at" field.
func EditedAtNEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldEditedAt, v))
}

// EditedAtIn applies the In predicate on the "edited_at" field.
func EditedAtIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldEditedAt, vs...))
}

// EditedAtNotIn applies the NotIn predicate on the "edited_at" field.
func EditedAtNotIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldEditedAt, vs...))
}

// EditedAtGT applies the GT predicate on the "edited_at" field.
func EditedAtGT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldEditedAt, v))
}

// EditedAtGTE applies the GTE predicate on the "edited_at" field.
func EditedAtGTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldEditedAt, v))
}

// EditedAtLT applies the LT predicate on the "edited_at" field.
func EditedAtLT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldEditedAt, v))
}

// EditedAtLTE applies the LTE predicate on the "edited_at" field.
func EditedAtLTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldEditedAt, v))
}

// EditedAtIsNil applies the IsNil predicate on the "edited_at" field.
func EditedAtIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldEditedAt))
}

// EditedAtNotNil applies the NotNil predicate on the "edited_at" field.
func EditedAtNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldEditedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldDeletedAt))
}

// HasGame applies the HasEdge predicate on the "game" edge.
func HasGame() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GameTable, GameColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGameWith applies the HasEdge predicate on the "game" edge with a given conditions (other predicates).
func HasGameWith(preds ...predicate.Game) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newGameStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFile applies the HasEdge predicate on the "file" edge.
func HasFile() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FileTable, FileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFileWith applies the HasEdge predicate on the "file" edge with a given conditions (other predicates).
func HasFileWith(preds ...predicate.File) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newFileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Comment) predicate.Comment {
	return predicate.Comment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Comment) predicate.Comment {
	return predicate.Comment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Comment) predicate.Comment {
	return predicate.Comment(sql.NotPredicates(p))
}
