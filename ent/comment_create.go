// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/deicod/archivedgames/ent/comment"
	"github.com/deicod/archivedgames/ent/file"
	"github.com/deicod/archivedgames/ent/game"
)

// CommentCreate is the builder for creating a Comment entity.
type CommentCreate struct {
	config
	mutation *CommentMutation
	hooks    []Hook
}

// SetSubjectType sets the "subject_type" field.
func (_c *CommentCreate) SetSubjectType(v string) *CommentCreate {
	_c.mutation.SetSubjectType(v)
	return _c
}

// SetSubjectID sets the "subject_id" field.
func (_c *CommentCreate) SetSubjectID(v string) *CommentCreate {
	_c.mutation.SetSubjectID(v)
	return _c
}

// SetUserID sets the "user_id" field.
func (_c *CommentCreate) SetUserID(v string) *CommentCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetLanguage sets the "language" field.
func (_c *CommentCreate) SetLanguage(v string) *CommentCreate {
	_c.mutation.SetLanguage(v)
	return _c
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (_c *CommentCreate) SetNillableLanguage(v *string) *CommentCreate {
	if v != nil {
		_c.SetLanguage(*v)
	}
	return _c
}

// SetContentSanitized sets the "content_sanitized" field.
func (_c *CommentCreate) SetContentSanitized(v string) *CommentCreate {
	_c.mutation.SetContentSanitized(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *CommentCreate) SetCreatedAt(v time.Time) *CommentCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *CommentCreate) SetNillableCreatedAt(v *time.Time) *CommentCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetEditedAt sets the "edited_at" field.
func (_c *CommentCreate) SetEditedAt(v time.Time) *CommentCreate {
	_c.mutation.SetEditedAt(v)
	return _c
}

// SetNillableEditedAt sets the "edited_at" field if the given value is not nil.
func (_c *CommentCreate) SetNillableEditedAt(v *time.Time) *CommentCreate {
	if v != nil {
		_c.SetEditedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *CommentCreate) SetDeletedAt(v time.Time) *CommentCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *CommentCreate) SetNillableDeletedAt(v *time.Time) *CommentCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *CommentCreate) SetID(v string) *CommentCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *CommentCreate) SetNillableID(v *string) *CommentCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (_c *CommentCreate) SetGameID(id string) *CommentCreate {
	_c.mutation.SetGameID(id)
	return _c
}

// SetNillableGameID sets the "game" edge to the Game entity by ID if the given value is not nil.
func (_c *CommentCreate) SetNillableGameID(id *string) *CommentCreate {
	if id != nil {
		_c = _c.SetGameID(*id)
	}
	return _c
}

// SetGame sets the "game" edge to the Game entity.
func (_c *CommentCreate) SetGame(v *Game) *CommentCreate {
	return _c.SetGameID(v.ID)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (_c *CommentCreate) SetFileID(id string) *CommentCreate {
	_c.mutation.SetFileID(id)
	return _c
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (_c *CommentCreate) SetNillableFileID(id *string) *CommentCreate {
	if id != nil {
		_c = _c.SetFileID(*id)
	}
	return _c
}

// SetFile sets the "file" edge to the File entity.
func (_c *CommentCreate) SetFile(v *File) *CommentCreate {
	return _c.SetFileID(v.ID)
}

// Mutation returns the CommentMutation object of the builder.
func (_c *CommentCreate) Mutation() *CommentMutation {
	return _c.mutation
}

// Save creates the Comment in the database.
func (_c *CommentCreate) Save(ctx context.Context) (*Comment, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *CommentCreate) SaveX(ctx context.Context) *Comment {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CommentCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CommentCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *CommentCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := comment.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := comment.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *CommentCreate) check() error {
	if _, ok := _c.mutation.SubjectType(); !ok {
		return &ValidationError{Name: "subject_type", err: errors.New(`ent: missing required field "Comment.subject_type"`)}
	}
	if _, ok := _c.mutation.SubjectID(); !ok {
		return &ValidationError{Name: "subject_id", err: errors.New(`ent: missing required field "Comment.subject_id"`)}
	}
	if _, ok := _c.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Comment.user_id"`)}
	}
	if _, ok := _c.mutation.ContentSanitized(); !ok {
		return &ValidationError{Name: "content_sanitized", err: errors.New(`ent: missing required field "Comment.content_sanitized"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Comment.created_at"`)}
	}
	return nil
}

func (_c *CommentCreate) sqlSave(ctx context.Context) (*Comment, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Comment.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *CommentCreate) createSpec() (*Comment, *sqlgraph.CreateSpec) {
	var (
		_node = &Comment{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(comment.Table, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.SubjectType(); ok {
		_spec.SetField(comment.FieldSubjectType, field.TypeString, value)
		_node.SubjectType = value
	}
	if value, ok := _c.mutation.SubjectID(); ok {
		_spec.SetField(comment.FieldSubjectID, field.TypeString, value)
		_node.SubjectID = value
	}
	if value, ok := _c.mutation.UserID(); ok {
		_spec.SetField(comment.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := _c.mutation.Language(); ok {
		_spec.SetField(comment.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := _c.mutation.ContentSanitized(); ok {
		_spec.SetField(comment.FieldContentSanitized, field.TypeString, value)
		_node.ContentSanitized = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(comment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.EditedAt(); ok {
		_spec.SetField(comment.FieldEditedAt, field.TypeTime, value)
		_node.EditedAt = &value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(comment.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := _c.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.GameTable,
			Columns: []string{comment.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.game_comments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.FileTable,
			Columns: []string{comment.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.file_comments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CommentCreateBulk is the builder for creating many Comment entities in bulk.
type CommentCreateBulk struct {
	config
	err      error
	builders []*CommentCreate
}

// Save creates the Comment entities in the database.
func (_c *CommentCreateBulk) Save(ctx context.Context) ([]*Comment, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Comment, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *CommentCreateBulk) SaveX(ctx context.Context) []*Comment {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CommentCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CommentCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
