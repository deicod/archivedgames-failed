// Code generated by ent, DO NOT EDIT.

package file

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the file type in the database.
	Label = "file"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldOriginalName holds the string denoting the original_name field in the database.
	FieldOriginalName = "original_name"
	// FieldNormalizedName holds the string denoting the normalized_name field in the database.
	FieldNormalizedName = "normalized_name"
	// FieldSetKey holds the string denoting the set_key field in the database.
	FieldSetKey = "set_key"
	// FieldChecksum holds the string denoting the checksum field in the database.
	FieldChecksum = "checksum"
	// FieldSizeBytes holds the string denoting the size_bytes field in the database.
	FieldSizeBytes = "size_bytes"
	// FieldMimeType holds the string denoting the mime_type field in the database.
	FieldMimeType = "mime_type"
	// FieldFormat holds the string denoting the format field in the database.
	FieldFormat = "format"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldQuarantine holds the string denoting the quarantine field in the database.
	FieldQuarantine = "quarantine"
	// FieldNeedsReview holds the string denoting the needs_review field in the database.
	FieldNeedsReview = "needs_review"
	// FieldDiskNumber holds the string denoting the disk_number field in the database.
	FieldDiskNumber = "disk_number"
	// FieldSide holds the string denoting the side field in the database.
	FieldSide = "side"
	// EdgeGame holds the string denoting the game edge name in mutations.
	EdgeGame = "game"
	// Table holds the table name of the file in the database.
	Table = "files"
	// GameTable is the table that holds the game relation/edge.
	GameTable = "files"
	// GameInverseTable is the table name for the Game entity.
	// It exists in this package in order to avoid circular dependency with the "game" package.
	GameInverseTable = "games"
	// GameColumn is the table column denoting the game relation/edge.
	GameColumn = "game_files"
)

// Columns holds all SQL columns for file fields.
var Columns = []string{
	FieldID,
	FieldPath,
	FieldOriginalName,
	FieldNormalizedName,
	FieldSetKey,
	FieldChecksum,
	FieldSizeBytes,
	FieldMimeType,
	FieldFormat,
	FieldSource,
	FieldQuarantine,
	FieldNeedsReview,
	FieldDiskNumber,
	FieldSide,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "files"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"game_files",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultQuarantine holds the default value on creation for the "quarantine" field.
	DefaultQuarantine bool
	// DefaultNeedsReview holds the default value on creation for the "needs_review" field.
	DefaultNeedsReview bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the File queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// ByOriginalName orders the results by the original_name field.
func ByOriginalName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginalName, opts...).ToFunc()
}

// ByNormalizedName orders the results by the normalized_name field.
func ByNormalizedName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNormalizedName, opts...).ToFunc()
}

// BySetKey orders the results by the set_key field.
func BySetKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSetKey, opts...).ToFunc()
}

// ByChecksum orders the results by the checksum field.
func ByChecksum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChecksum, opts...).ToFunc()
}

// BySizeBytes orders the results by the size_bytes field.
func BySizeBytes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSizeBytes, opts...).ToFunc()
}

// ByMimeType orders the results by the mime_type field.
func ByMimeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMimeType, opts...).ToFunc()
}

// ByFormat orders the results by the format field.
func ByFormat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormat, opts...).ToFunc()
}

// BySource orders the results by the source field.
func BySource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSource, opts...).ToFunc()
}

// ByQuarantine orders the results by the quarantine field.
func ByQuarantine(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuarantine, opts...).ToFunc()
}

// ByNeedsReview orders the results by the needs_review field.
func ByNeedsReview(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNeedsReview, opts...).ToFunc()
}

// ByDiskNumber orders the results by the disk_number field.
func ByDiskNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiskNumber, opts...).ToFunc()
}

// BySide orders the results by the side field.
func BySide(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSide, opts...).ToFunc()
}

// ByGameField orders the results by game field.
func ByGameField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGameStep(), sql.OrderByField(field, opts...))
	}
}
func newGameStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GameInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GameTable, GameColumn),
	)
}
