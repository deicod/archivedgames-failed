// Code generated by ent, DO NOT EDIT.

package file

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/deicod/archivedgames/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.File {
	return predicate.File(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.File {
	return predicate.File(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.File {
	return predicate.File(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.File {
	return predicate.File(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.File {
	return predicate.File(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.File {
	return predicate.File(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.File {
	return predicate.File(sql.FieldLTE(FieldID, id))
}

// Xid applies equality check predicate on the "xid" field. It's identical to XidEQ.
func Xid(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldXid, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldPath, v))
}

// OriginalName applies equality check predicate on the "original_name" field. It's identical to OriginalNameEQ.
func OriginalName(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldOriginalName, v))
}

// NormalizedName applies equality check predicate on the "normalized_name" field. It's identical to NormalizedNameEQ.
func NormalizedName(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldNormalizedName, v))
}

// Checksum applies equality check predicate on the "checksum" field. It's identical to ChecksumEQ.
func Checksum(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldChecksum, v))
}

// SizeBytes applies equality check predicate on the "size_bytes" field. It's identical to SizeBytesEQ.
func SizeBytes(v int64) predicate.File {
	return predicate.File(sql.FieldEQ(FieldSizeBytes, v))
}

// MimeType applies equality check predicate on the "mime_type" field. It's identical to MimeTypeEQ.
func MimeType(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldMimeType, v))
}

// Format applies equality check predicate on the "format" field. It's identical to FormatEQ.
func Format(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldFormat, v))
}

// Source applies equality check predicate on the "source" field. It's identical to SourceEQ.
func Source(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldSource, v))
}

// Quarantine applies equality check predicate on the "quarantine" field. It's identical to QuarantineEQ.
func Quarantine(v bool) predicate.File {
	return predicate.File(sql.FieldEQ(FieldQuarantine, v))
}

// NeedsReview applies equality check predicate on the "needs_review" field. It's identical to NeedsReviewEQ.
func NeedsReview(v bool) predicate.File {
	return predicate.File(sql.FieldEQ(FieldNeedsReview, v))
}

// XidEQ applies the EQ predicate on the "xid" field.
func XidEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldXid, v))
}

// XidNEQ applies the NEQ predicate on the "xid" field.
func XidNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldXid, v))
}

// XidIn applies the In predicate on the "xid" field.
func XidIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldXid, vs...))
}

// XidNotIn applies the NotIn predicate on the "xid" field.
func XidNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldXid, vs...))
}

// XidGT applies the GT predicate on the "xid" field.
func XidGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldXid, v))
}

// XidGTE applies the GTE predicate on the "xid" field.
func XidGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldXid, v))
}

// XidLT applies the LT predicate on the "xid" field.
func XidLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldXid, v))
}

// XidLTE applies the LTE predicate on the "xid" field.
func XidLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldXid, v))
}

// XidContains applies the Contains predicate on the "xid" field.
func XidContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldXid, v))
}

// XidHasPrefix applies the HasPrefix predicate on the "xid" field.
func XidHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldXid, v))
}

// XidHasSuffix applies the HasSuffix predicate on the "xid" field.
func XidHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldXid, v))
}

// XidEqualFold applies the EqualFold predicate on the "xid" field.
func XidEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldXid, v))
}

// XidContainsFold applies the ContainsFold predicate on the "xid" field.
func XidContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldXid, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldPath, v))
}

// OriginalNameEQ applies the EQ predicate on the "original_name" field.
func OriginalNameEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldOriginalName, v))
}

// OriginalNameNEQ applies the NEQ predicate on the "original_name" field.
func OriginalNameNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldOriginalName, v))
}

// OriginalNameIn applies the In predicate on the "original_name" field.
func OriginalNameIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldOriginalName, vs...))
}

// OriginalNameNotIn applies the NotIn predicate on the "original_name" field.
func OriginalNameNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldOriginalName, vs...))
}

// OriginalNameGT applies the GT predicate on the "original_name" field.
func OriginalNameGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldOriginalName, v))
}

// OriginalNameGTE applies the GTE predicate on the "original_name" field.
func OriginalNameGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldOriginalName, v))
}

// OriginalNameLT applies the LT predicate on the "original_name" field.
func OriginalNameLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldOriginalName, v))
}

// OriginalNameLTE applies the LTE predicate on the "original_name" field.
func OriginalNameLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldOriginalName, v))
}

// OriginalNameContains applies the Contains predicate on the "original_name" field.
func OriginalNameContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldOriginalName, v))
}

// OriginalNameHasPrefix applies the HasPrefix predicate on the "original_name" field.
func OriginalNameHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldOriginalName, v))
}

// OriginalNameHasSuffix applies the HasSuffix predicate on the "original_name" field.
func OriginalNameHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldOriginalName, v))
}

// OriginalNameEqualFold applies the EqualFold predicate on the "original_name" field.
func OriginalNameEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldOriginalName, v))
}

// OriginalNameContainsFold applies the ContainsFold predicate on the "original_name" field.
func OriginalNameContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldOriginalName, v))
}

// NormalizedNameEQ applies the EQ predicate on the "normalized_name" field.
func NormalizedNameEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldNormalizedName, v))
}

// NormalizedNameNEQ applies the NEQ predicate on the "normalized_name" field.
func NormalizedNameNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldNormalizedName, v))
}

// NormalizedNameIn applies the In predicate on the "normalized_name" field.
func NormalizedNameIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldNormalizedName, vs...))
}

// NormalizedNameNotIn applies the NotIn predicate on the "normalized_name" field.
func NormalizedNameNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldNormalizedName, vs...))
}

// NormalizedNameGT applies the GT predicate on the "normalized_name" field.
func NormalizedNameGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldNormalizedName, v))
}

// NormalizedNameGTE applies the GTE predicate on the "normalized_name" field.
func NormalizedNameGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldNormalizedName, v))
}

// NormalizedNameLT applies the LT predicate on the "normalized_name" field.
func NormalizedNameLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldNormalizedName, v))
}

// NormalizedNameLTE applies the LTE predicate on the "normalized_name" field.
func NormalizedNameLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldNormalizedName, v))
}

// NormalizedNameContains applies the Contains predicate on the "normalized_name" field.
func NormalizedNameContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldNormalizedName, v))
}

// NormalizedNameHasPrefix applies the HasPrefix predicate on the "normalized_name" field.
func NormalizedNameHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldNormalizedName, v))
}

// NormalizedNameHasSuffix applies the HasSuffix predicate on the "normalized_name" field.
func NormalizedNameHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldNormalizedName, v))
}

// NormalizedNameEqualFold applies the EqualFold predicate on the "normalized_name" field.
func NormalizedNameEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldNormalizedName, v))
}

// NormalizedNameContainsFold applies the ContainsFold predicate on the "normalized_name" field.
func NormalizedNameContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldNormalizedName, v))
}

// ChecksumEQ applies the EQ predicate on the "checksum" field.
func ChecksumEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldChecksum, v))
}

// ChecksumNEQ applies the NEQ predicate on the "checksum" field.
func ChecksumNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldChecksum, v))
}

// ChecksumIn applies the In predicate on the "checksum" field.
func ChecksumIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldChecksum, vs...))
}

// ChecksumNotIn applies the NotIn predicate on the "checksum" field.
func ChecksumNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldChecksum, vs...))
}

// ChecksumGT applies the GT predicate on the "checksum" field.
func ChecksumGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldChecksum, v))
}

// ChecksumGTE applies the GTE predicate on the "checksum" field.
func ChecksumGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldChecksum, v))
}

// ChecksumLT applies the LT predicate on the "checksum" field.
func ChecksumLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldChecksum, v))
}

// ChecksumLTE applies the LTE predicate on the "checksum" field.
func ChecksumLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldChecksum, v))
}

// ChecksumContains applies the Contains predicate on the "checksum" field.
func ChecksumContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldChecksum, v))
}

// ChecksumHasPrefix applies the HasPrefix predicate on the "checksum" field.
func ChecksumHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldChecksum, v))
}

// ChecksumHasSuffix applies the HasSuffix predicate on the "checksum" field.
func ChecksumHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldChecksum, v))
}

// ChecksumEqualFold applies the EqualFold predicate on the "checksum" field.
func ChecksumEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldChecksum, v))
}

// ChecksumContainsFold applies the ContainsFold predicate on the "checksum" field.
func ChecksumContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldChecksum, v))
}

// SizeBytesEQ applies the EQ predicate on the "size_bytes" field.
func SizeBytesEQ(v int64) predicate.File {
	return predicate.File(sql.FieldEQ(FieldSizeBytes, v))
}

// SizeBytesNEQ applies the NEQ predicate on the "size_bytes" field.
func SizeBytesNEQ(v int64) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldSizeBytes, v))
}

// SizeBytesIn applies the In predicate on the "size_bytes" field.
func SizeBytesIn(vs ...int64) predicate.File {
	return predicate.File(sql.FieldIn(FieldSizeBytes, vs...))
}

// SizeBytesNotIn applies the NotIn predicate on the "size_bytes" field.
func SizeBytesNotIn(vs ...int64) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldSizeBytes, vs...))
}

// SizeBytesGT applies the GT predicate on the "size_bytes" field.
func SizeBytesGT(v int64) predicate.File {
	return predicate.File(sql.FieldGT(FieldSizeBytes, v))
}

// SizeBytesGTE applies the GTE predicate on the "size_bytes" field.
func SizeBytesGTE(v int64) predicate.File {
	return predicate.File(sql.FieldGTE(FieldSizeBytes, v))
}

// SizeBytesLT applies the LT predicate on the "size_bytes" field.
func SizeBytesLT(v int64) predicate.File {
	return predicate.File(sql.FieldLT(FieldSizeBytes, v))
}

// SizeBytesLTE applies the LTE predicate on the "size_bytes" field.
func SizeBytesLTE(v int64) predicate.File {
	return predicate.File(sql.FieldLTE(FieldSizeBytes, v))
}

// MimeTypeEQ applies the EQ predicate on the "mime_type" field.
func MimeTypeEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldMimeType, v))
}

// MimeTypeNEQ applies the NEQ predicate on the "mime_type" field.
func MimeTypeNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldMimeType, v))
}

// MimeTypeIn applies the In predicate on the "mime_type" field.
func MimeTypeIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldMimeType, vs...))
}

// MimeTypeNotIn applies the NotIn predicate on the "mime_type" field.
func MimeTypeNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldMimeType, vs...))
}

// MimeTypeGT applies the GT predicate on the "mime_type" field.
func MimeTypeGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldMimeType, v))
}

// MimeTypeGTE applies the GTE predicate on the "mime_type" field.
func MimeTypeGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldMimeType, v))
}

// MimeTypeLT applies the LT predicate on the "mime_type" field.
func MimeTypeLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldMimeType, v))
}

// MimeTypeLTE applies the LTE predicate on the "mime_type" field.
func MimeTypeLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldMimeType, v))
}

// MimeTypeContains applies the Contains predicate on the "mime_type" field.
func MimeTypeContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldMimeType, v))
}

// MimeTypeHasPrefix applies the HasPrefix predicate on the "mime_type" field.
func MimeTypeHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldMimeType, v))
}

// MimeTypeHasSuffix applies the HasSuffix predicate on the "mime_type" field.
func MimeTypeHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldMimeType, v))
}

// MimeTypeIsNil applies the IsNil predicate on the "mime_type" field.
func MimeTypeIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldMimeType))
}

// MimeTypeNotNil applies the NotNil predicate on the "mime_type" field.
func MimeTypeNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldMimeType))
}

// MimeTypeEqualFold applies the EqualFold predicate on the "mime_type" field.
func MimeTypeEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldMimeType, v))
}

// MimeTypeContainsFold applies the ContainsFold predicate on the "mime_type" field.
func MimeTypeContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldMimeType, v))
}

// FormatEQ applies the EQ predicate on the "format" field.
func FormatEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldFormat, v))
}

// FormatNEQ applies the NEQ predicate on the "format" field.
func FormatNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldFormat, v))
}

// FormatIn applies the In predicate on the "format" field.
func FormatIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldFormat, vs...))
}

// FormatNotIn applies the NotIn predicate on the "format" field.
func FormatNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldFormat, vs...))
}

// FormatGT applies the GT predicate on the "format" field.
func FormatGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldFormat, v))
}

// FormatGTE applies the GTE predicate on the "format" field.
func FormatGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldFormat, v))
}

// FormatLT applies the LT predicate on the "format" field.
func FormatLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldFormat, v))
}

// FormatLTE applies the LTE predicate on the "format" field.
func FormatLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldFormat, v))
}

// FormatContains applies the Contains predicate on the "format" field.
func FormatContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldFormat, v))
}

// FormatHasPrefix applies the HasPrefix predicate on the "format" field.
func FormatHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldFormat, v))
}

// FormatHasSuffix applies the HasSuffix predicate on the "format" field.
func FormatHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldFormat, v))
}

// FormatIsNil applies the IsNil predicate on the "format" field.
func FormatIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldFormat))
}

// FormatNotNil applies the NotNil predicate on the "format" field.
func FormatNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldFormat))
}

// FormatEqualFold applies the EqualFold predicate on the "format" field.
func FormatEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldFormat, v))
}

// FormatContainsFold applies the ContainsFold predicate on the "format" field.
func FormatContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldFormat, v))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldSource, v))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldSource, v))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldSource, vs...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldSource, vs...))
}

// SourceGT applies the GT predicate on the "source" field.
func SourceGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldSource, v))
}

// SourceGTE applies the GTE predicate on the "source" field.
func SourceGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldSource, v))
}

// SourceLT applies the LT predicate on the "source" field.
func SourceLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldSource, v))
}

// SourceLTE applies the LTE predicate on the "source" field.
func SourceLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldSource, v))
}

// SourceContains applies the Contains predicate on the "source" field.
func SourceContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldSource, v))
}

// SourceHasPrefix applies the HasPrefix predicate on the "source" field.
func SourceHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldSource, v))
}

// SourceHasSuffix applies the HasSuffix predicate on the "source" field.
func SourceHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldSource, v))
}

// SourceEqualFold applies the EqualFold predicate on the "source" field.
func SourceEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldSource, v))
}

// SourceContainsFold applies the ContainsFold predicate on the "source" field.
func SourceContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldSource, v))
}

// QuarantineEQ applies the EQ predicate on the "quarantine" field.
func QuarantineEQ(v bool) predicate.File {
	return predicate.File(sql.FieldEQ(FieldQuarantine, v))
}

// QuarantineNEQ applies the NEQ predicate on the "quarantine" field.
func QuarantineNEQ(v bool) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldQuarantine, v))
}

// NeedsReviewEQ applies the EQ predicate on the "needs_review" field.
func NeedsReviewEQ(v bool) predicate.File {
	return predicate.File(sql.FieldEQ(FieldNeedsReview, v))
}

// NeedsReviewNEQ applies the NEQ predicate on the "needs_review" field.
func NeedsReviewNEQ(v bool) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldNeedsReview, v))
}

// HasGame applies the HasEdge predicate on the "game" edge.
func HasGame() predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GameTable, GameColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGameWith applies the HasEdge predicate on the "game" edge with a given conditions (other predicates).
func HasGameWith(preds ...predicate.Game) predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := newGameStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.File) predicate.File {
	return predicate.File(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.File) predicate.File {
	return predicate.File(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.File) predicate.File {
	return predicate.File(sql.NotPredicates(p))
}
