// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/deicod/archivedgames/ent/file"
	"github.com/deicod/archivedgames/ent/game"
)

// FileCreate is the builder for creating a File entity.
type FileCreate struct {
	config
	mutation *FileMutation
	hooks    []Hook
}

// SetPath sets the "path" field.
func (fc *FileCreate) SetPath(s string) *FileCreate {
	fc.mutation.SetPath(s)
	return fc
}

// SetOriginalName sets the "original_name" field.
func (fc *FileCreate) SetOriginalName(s string) *FileCreate {
	fc.mutation.SetOriginalName(s)
	return fc
}

// SetNormalizedName sets the "normalized_name" field.
func (fc *FileCreate) SetNormalizedName(s string) *FileCreate {
	fc.mutation.SetNormalizedName(s)
	return fc
}

// SetChecksum sets the "checksum" field.
func (fc *FileCreate) SetChecksum(s string) *FileCreate {
	fc.mutation.SetChecksum(s)
	return fc
}

// SetSizeBytes sets the "size_bytes" field.
func (fc *FileCreate) SetSizeBytes(i int64) *FileCreate {
	fc.mutation.SetSizeBytes(i)
	return fc
}

// SetMimeType sets the "mime_type" field.
func (fc *FileCreate) SetMimeType(s string) *FileCreate {
	fc.mutation.SetMimeType(s)
	return fc
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (fc *FileCreate) SetNillableMimeType(s *string) *FileCreate {
	if s != nil {
		fc.SetMimeType(*s)
	}
	return fc
}

// SetFormat sets the "format" field.
func (fc *FileCreate) SetFormat(s string) *FileCreate {
	fc.mutation.SetFormat(s)
	return fc
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (fc *FileCreate) SetNillableFormat(s *string) *FileCreate {
	if s != nil {
		fc.SetFormat(*s)
	}
	return fc
}

// SetSource sets the "source" field.
func (fc *FileCreate) SetSource(s string) *FileCreate {
	fc.mutation.SetSource(s)
	return fc
}

// SetQuarantine sets the "quarantine" field.
func (fc *FileCreate) SetQuarantine(b bool) *FileCreate {
	fc.mutation.SetQuarantine(b)
	return fc
}

// SetNillableQuarantine sets the "quarantine" field if the given value is not nil.
func (fc *FileCreate) SetNillableQuarantine(b *bool) *FileCreate {
	if b != nil {
		fc.SetQuarantine(*b)
	}
	return fc
}

// SetNeedsReview sets the "needs_review" field.
func (fc *FileCreate) SetNeedsReview(b bool) *FileCreate {
	fc.mutation.SetNeedsReview(b)
	return fc
}

// SetNillableNeedsReview sets the "needs_review" field if the given value is not nil.
func (fc *FileCreate) SetNillableNeedsReview(b *bool) *FileCreate {
	if b != nil {
		fc.SetNeedsReview(*b)
	}
	return fc
}

// SetDiskNumber sets the "disk_number" field.
func (fc *FileCreate) SetDiskNumber(i int) *FileCreate {
	fc.mutation.SetDiskNumber(i)
	return fc
}

// SetNillableDiskNumber sets the "disk_number" field if the given value is not nil.
func (fc *FileCreate) SetNillableDiskNumber(i *int) *FileCreate {
	if i != nil {
		fc.SetDiskNumber(*i)
	}
	return fc
}

// SetSide sets the "side" field.
func (fc *FileCreate) SetSide(s string) *FileCreate {
	fc.mutation.SetSide(s)
	return fc
}

// SetNillableSide sets the "side" field if the given value is not nil.
func (fc *FileCreate) SetNillableSide(s *string) *FileCreate {
	if s != nil {
		fc.SetSide(*s)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *FileCreate) SetID(s string) *FileCreate {
	fc.mutation.SetID(s)
	return fc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fc *FileCreate) SetNillableID(s *string) *FileCreate {
	if s != nil {
		fc.SetID(*s)
	}
	return fc
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (fc *FileCreate) SetGameID(id string) *FileCreate {
	fc.mutation.SetGameID(id)
	return fc
}

// SetGame sets the "game" edge to the Game entity.
func (fc *FileCreate) SetGame(g *Game) *FileCreate {
	return fc.SetGameID(g.ID)
}

// Mutation returns the FileMutation object of the builder.
func (fc *FileCreate) Mutation() *FileMutation {
	return fc.mutation
}

// Save creates the File in the database.
func (fc *FileCreate) Save(ctx context.Context) (*File, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FileCreate) SaveX(ctx context.Context) *File {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FileCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FileCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FileCreate) defaults() {
	if _, ok := fc.mutation.Quarantine(); !ok {
		v := file.DefaultQuarantine
		fc.mutation.SetQuarantine(v)
	}
	if _, ok := fc.mutation.NeedsReview(); !ok {
		v := file.DefaultNeedsReview
		fc.mutation.SetNeedsReview(v)
	}
	if _, ok := fc.mutation.ID(); !ok {
		v := file.DefaultID()
		fc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FileCreate) check() error {
	if _, ok := fc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "File.path"`)}
	}
	if _, ok := fc.mutation.OriginalName(); !ok {
		return &ValidationError{Name: "original_name", err: errors.New(`ent: missing required field "File.original_name"`)}
	}
	if _, ok := fc.mutation.NormalizedName(); !ok {
		return &ValidationError{Name: "normalized_name", err: errors.New(`ent: missing required field "File.normalized_name"`)}
	}
	if _, ok := fc.mutation.Checksum(); !ok {
		return &ValidationError{Name: "checksum", err: errors.New(`ent: missing required field "File.checksum"`)}
	}
	if _, ok := fc.mutation.SizeBytes(); !ok {
		return &ValidationError{Name: "size_bytes", err: errors.New(`ent: missing required field "File.size_bytes"`)}
	}
	if _, ok := fc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "File.source"`)}
	}
	if _, ok := fc.mutation.Quarantine(); !ok {
		return &ValidationError{Name: "quarantine", err: errors.New(`ent: missing required field "File.quarantine"`)}
	}
	if _, ok := fc.mutation.NeedsReview(); !ok {
		return &ValidationError{Name: "needs_review", err: errors.New(`ent: missing required field "File.needs_review"`)}
	}
	if len(fc.mutation.GameIDs()) == 0 {
		return &ValidationError{Name: "game", err: errors.New(`ent: missing required edge "File.game"`)}
	}
	return nil
}

func (fc *FileCreate) sqlSave(ctx context.Context) (*File, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected File.ID type: %T", _spec.ID.Value)
		}
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FileCreate) createSpec() (*File, *sqlgraph.CreateSpec) {
	var (
		_node = &File{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(file.Table, sqlgraph.NewFieldSpec(file.FieldID, field.TypeString))
	)
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.Path(); ok {
		_spec.SetField(file.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := fc.mutation.OriginalName(); ok {
		_spec.SetField(file.FieldOriginalName, field.TypeString, value)
		_node.OriginalName = value
	}
	if value, ok := fc.mutation.NormalizedName(); ok {
		_spec.SetField(file.FieldNormalizedName, field.TypeString, value)
		_node.NormalizedName = value
	}
	if value, ok := fc.mutation.Checksum(); ok {
		_spec.SetField(file.FieldChecksum, field.TypeString, value)
		_node.Checksum = value
	}
	if value, ok := fc.mutation.SizeBytes(); ok {
		_spec.SetField(file.FieldSizeBytes, field.TypeInt64, value)
		_node.SizeBytes = value
	}
	if value, ok := fc.mutation.MimeType(); ok {
		_spec.SetField(file.FieldMimeType, field.TypeString, value)
		_node.MimeType = value
	}
	if value, ok := fc.mutation.Format(); ok {
		_spec.SetField(file.FieldFormat, field.TypeString, value)
		_node.Format = value
	}
	if value, ok := fc.mutation.Source(); ok {
		_spec.SetField(file.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := fc.mutation.Quarantine(); ok {
		_spec.SetField(file.FieldQuarantine, field.TypeBool, value)
		_node.Quarantine = value
	}
	if value, ok := fc.mutation.NeedsReview(); ok {
		_spec.SetField(file.FieldNeedsReview, field.TypeBool, value)
		_node.NeedsReview = value
	}
	if value, ok := fc.mutation.DiskNumber(); ok {
		_spec.SetField(file.FieldDiskNumber, field.TypeInt, value)
		_node.DiskNumber = &value
	}
	if value, ok := fc.mutation.Side(); ok {
		_spec.SetField(file.FieldSide, field.TypeString, value)
		_node.Side = value
	}
	if nodes := fc.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.GameTable,
			Columns: []string{file.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.game_files = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FileCreateBulk is the builder for creating many File entities in bulk.
type FileCreateBulk struct {
	config
	err      error
	builders []*FileCreate
}

// Save creates the File entities in the database.
func (fcb *FileCreateBulk) Save(ctx context.Context) ([]*File, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*File, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FileCreateBulk) SaveX(ctx context.Context) []*File {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FileCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FileCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
