// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/deicod/archivedgames/ent/file"
	"github.com/deicod/archivedgames/ent/game"
	"github.com/deicod/archivedgames/ent/predicate"
)

// FileUpdate is the builder for updating File entities.
type FileUpdate struct {
	config
	hooks    []Hook
	mutation *FileMutation
}

// Where appends a list predicates to the FileUpdate builder.
func (fu *FileUpdate) Where(ps ...predicate.File) *FileUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetPath sets the "path" field.
func (fu *FileUpdate) SetPath(s string) *FileUpdate {
	fu.mutation.SetPath(s)
	return fu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (fu *FileUpdate) SetNillablePath(s *string) *FileUpdate {
	if s != nil {
		fu.SetPath(*s)
	}
	return fu
}

// SetOriginalName sets the "original_name" field.
func (fu *FileUpdate) SetOriginalName(s string) *FileUpdate {
	fu.mutation.SetOriginalName(s)
	return fu
}

// SetNillableOriginalName sets the "original_name" field if the given value is not nil.
func (fu *FileUpdate) SetNillableOriginalName(s *string) *FileUpdate {
	if s != nil {
		fu.SetOriginalName(*s)
	}
	return fu
}

// SetNormalizedName sets the "normalized_name" field.
func (fu *FileUpdate) SetNormalizedName(s string) *FileUpdate {
	fu.mutation.SetNormalizedName(s)
	return fu
}

// SetNillableNormalizedName sets the "normalized_name" field if the given value is not nil.
func (fu *FileUpdate) SetNillableNormalizedName(s *string) *FileUpdate {
	if s != nil {
		fu.SetNormalizedName(*s)
	}
	return fu
}

// SetChecksum sets the "checksum" field.
func (fu *FileUpdate) SetChecksum(s string) *FileUpdate {
	fu.mutation.SetChecksum(s)
	return fu
}

// SetNillableChecksum sets the "checksum" field if the given value is not nil.
func (fu *FileUpdate) SetNillableChecksum(s *string) *FileUpdate {
	if s != nil {
		fu.SetChecksum(*s)
	}
	return fu
}

// SetSizeBytes sets the "size_bytes" field.
func (fu *FileUpdate) SetSizeBytes(i int64) *FileUpdate {
	fu.mutation.ResetSizeBytes()
	fu.mutation.SetSizeBytes(i)
	return fu
}

// SetNillableSizeBytes sets the "size_bytes" field if the given value is not nil.
func (fu *FileUpdate) SetNillableSizeBytes(i *int64) *FileUpdate {
	if i != nil {
		fu.SetSizeBytes(*i)
	}
	return fu
}

// AddSizeBytes adds i to the "size_bytes" field.
func (fu *FileUpdate) AddSizeBytes(i int64) *FileUpdate {
	fu.mutation.AddSizeBytes(i)
	return fu
}

// SetMimeType sets the "mime_type" field.
func (fu *FileUpdate) SetMimeType(s string) *FileUpdate {
	fu.mutation.SetMimeType(s)
	return fu
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (fu *FileUpdate) SetNillableMimeType(s *string) *FileUpdate {
	if s != nil {
		fu.SetMimeType(*s)
	}
	return fu
}

// ClearMimeType clears the value of the "mime_type" field.
func (fu *FileUpdate) ClearMimeType() *FileUpdate {
	fu.mutation.ClearMimeType()
	return fu
}

// SetFormat sets the "format" field.
func (fu *FileUpdate) SetFormat(s string) *FileUpdate {
	fu.mutation.SetFormat(s)
	return fu
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (fu *FileUpdate) SetNillableFormat(s *string) *FileUpdate {
	if s != nil {
		fu.SetFormat(*s)
	}
	return fu
}

// ClearFormat clears the value of the "format" field.
func (fu *FileUpdate) ClearFormat() *FileUpdate {
	fu.mutation.ClearFormat()
	return fu
}

// SetSource sets the "source" field.
func (fu *FileUpdate) SetSource(s string) *FileUpdate {
	fu.mutation.SetSource(s)
	return fu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (fu *FileUpdate) SetNillableSource(s *string) *FileUpdate {
	if s != nil {
		fu.SetSource(*s)
	}
	return fu
}

// SetQuarantine sets the "quarantine" field.
func (fu *FileUpdate) SetQuarantine(b bool) *FileUpdate {
	fu.mutation.SetQuarantine(b)
	return fu
}

// SetNillableQuarantine sets the "quarantine" field if the given value is not nil.
func (fu *FileUpdate) SetNillableQuarantine(b *bool) *FileUpdate {
	if b != nil {
		fu.SetQuarantine(*b)
	}
	return fu
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (fu *FileUpdate) SetGameID(id int) *FileUpdate {
	fu.mutation.SetGameID(id)
	return fu
}

// SetGame sets the "game" edge to the Game entity.
func (fu *FileUpdate) SetGame(g *Game) *FileUpdate {
	return fu.SetGameID(g.ID)
}

// Mutation returns the FileMutation object of the builder.
func (fu *FileUpdate) Mutation() *FileMutation {
	return fu.mutation
}

// ClearGame clears the "game" edge to the Game entity.
func (fu *FileUpdate) ClearGame() *FileUpdate {
	fu.mutation.ClearGame()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FileUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FileUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FileUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FileUpdate) check() error {
	if fu.mutation.GameCleared() && len(fu.mutation.GameIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "File.game"`)
	}
	return nil
}

func (fu *FileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Path(); ok {
		_spec.SetField(file.FieldPath, field.TypeString, value)
	}
	if value, ok := fu.mutation.OriginalName(); ok {
		_spec.SetField(file.FieldOriginalName, field.TypeString, value)
	}
	if value, ok := fu.mutation.NormalizedName(); ok {
		_spec.SetField(file.FieldNormalizedName, field.TypeString, value)
	}
	if value, ok := fu.mutation.Checksum(); ok {
		_spec.SetField(file.FieldChecksum, field.TypeString, value)
	}
	if value, ok := fu.mutation.SizeBytes(); ok {
		_spec.SetField(file.FieldSizeBytes, field.TypeInt64, value)
	}
	if value, ok := fu.mutation.AddedSizeBytes(); ok {
		_spec.AddField(file.FieldSizeBytes, field.TypeInt64, value)
	}
	if value, ok := fu.mutation.MimeType(); ok {
		_spec.SetField(file.FieldMimeType, field.TypeString, value)
	}
	if fu.mutation.MimeTypeCleared() {
		_spec.ClearField(file.FieldMimeType, field.TypeString)
	}
	if value, ok := fu.mutation.Format(); ok {
		_spec.SetField(file.FieldFormat, field.TypeString, value)
	}
	if fu.mutation.FormatCleared() {
		_spec.ClearField(file.FieldFormat, field.TypeString)
	}
	if value, ok := fu.mutation.Source(); ok {
		_spec.SetField(file.FieldSource, field.TypeString, value)
	}
	if value, ok := fu.mutation.Quarantine(); ok {
		_spec.SetField(file.FieldQuarantine, field.TypeBool, value)
	}
	if fu.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.GameTable,
			Columns: []string{file.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.GameTable,
			Columns: []string{file.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FileUpdateOne is the builder for updating a single File entity.
type FileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileMutation
}

// SetPath sets the "path" field.
func (fuo *FileUpdateOne) SetPath(s string) *FileUpdateOne {
	fuo.mutation.SetPath(s)
	return fuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillablePath(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetPath(*s)
	}
	return fuo
}

// SetOriginalName sets the "original_name" field.
func (fuo *FileUpdateOne) SetOriginalName(s string) *FileUpdateOne {
	fuo.mutation.SetOriginalName(s)
	return fuo
}

// SetNillableOriginalName sets the "original_name" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableOriginalName(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetOriginalName(*s)
	}
	return fuo
}

// SetNormalizedName sets the "normalized_name" field.
func (fuo *FileUpdateOne) SetNormalizedName(s string) *FileUpdateOne {
	fuo.mutation.SetNormalizedName(s)
	return fuo
}

// SetNillableNormalizedName sets the "normalized_name" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableNormalizedName(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetNormalizedName(*s)
	}
	return fuo
}

// SetChecksum sets the "checksum" field.
func (fuo *FileUpdateOne) SetChecksum(s string) *FileUpdateOne {
	fuo.mutation.SetChecksum(s)
	return fuo
}

// SetNillableChecksum sets the "checksum" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableChecksum(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetChecksum(*s)
	}
	return fuo
}

// SetSizeBytes sets the "size_bytes" field.
func (fuo *FileUpdateOne) SetSizeBytes(i int64) *FileUpdateOne {
	fuo.mutation.ResetSizeBytes()
	fuo.mutation.SetSizeBytes(i)
	return fuo
}

// SetNillableSizeBytes sets the "size_bytes" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableSizeBytes(i *int64) *FileUpdateOne {
	if i != nil {
		fuo.SetSizeBytes(*i)
	}
	return fuo
}

// AddSizeBytes adds i to the "size_bytes" field.
func (fuo *FileUpdateOne) AddSizeBytes(i int64) *FileUpdateOne {
	fuo.mutation.AddSizeBytes(i)
	return fuo
}

// SetMimeType sets the "mime_type" field.
func (fuo *FileUpdateOne) SetMimeType(s string) *FileUpdateOne {
	fuo.mutation.SetMimeType(s)
	return fuo
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableMimeType(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetMimeType(*s)
	}
	return fuo
}

// ClearMimeType clears the value of the "mime_type" field.
func (fuo *FileUpdateOne) ClearMimeType() *FileUpdateOne {
	fuo.mutation.ClearMimeType()
	return fuo
}

// SetFormat sets the "format" field.
func (fuo *FileUpdateOne) SetFormat(s string) *FileUpdateOne {
	fuo.mutation.SetFormat(s)
	return fuo
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableFormat(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetFormat(*s)
	}
	return fuo
}

// ClearFormat clears the value of the "format" field.
func (fuo *FileUpdateOne) ClearFormat() *FileUpdateOne {
	fuo.mutation.ClearFormat()
	return fuo
}

// SetSource sets the "source" field.
func (fuo *FileUpdateOne) SetSource(s string) *FileUpdateOne {
	fuo.mutation.SetSource(s)
	return fuo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableSource(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetSource(*s)
	}
	return fuo
}

// SetQuarantine sets the "quarantine" field.
func (fuo *FileUpdateOne) SetQuarantine(b bool) *FileUpdateOne {
	fuo.mutation.SetQuarantine(b)
	return fuo
}

// SetNillableQuarantine sets the "quarantine" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableQuarantine(b *bool) *FileUpdateOne {
	if b != nil {
		fuo.SetQuarantine(*b)
	}
	return fuo
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (fuo *FileUpdateOne) SetGameID(id int) *FileUpdateOne {
	fuo.mutation.SetGameID(id)
	return fuo
}

// SetGame sets the "game" edge to the Game entity.
func (fuo *FileUpdateOne) SetGame(g *Game) *FileUpdateOne {
	return fuo.SetGameID(g.ID)
}

// Mutation returns the FileMutation object of the builder.
func (fuo *FileUpdateOne) Mutation() *FileMutation {
	return fuo.mutation
}

// ClearGame clears the "game" edge to the Game entity.
func (fuo *FileUpdateOne) ClearGame() *FileUpdateOne {
	fuo.mutation.ClearGame()
	return fuo
}

// Where appends a list predicates to the FileUpdate builder.
func (fuo *FileUpdateOne) Where(ps ...predicate.File) *FileUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FileUpdateOne) Select(field string, fields ...string) *FileUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated File entity.
func (fuo *FileUpdateOne) Save(ctx context.Context) (*File, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FileUpdateOne) SaveX(ctx context.Context) *File {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FileUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FileUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FileUpdateOne) check() error {
	if fuo.mutation.GameCleared() && len(fuo.mutation.GameIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "File.game"`)
	}
	return nil
}

func (fuo *FileUpdateOne) sqlSave(ctx context.Context) (_node *File, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "File.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, file.FieldID)
		for _, f := range fields {
			if !file.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != file.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Path(); ok {
		_spec.SetField(file.FieldPath, field.TypeString, value)
	}
	if value, ok := fuo.mutation.OriginalName(); ok {
		_spec.SetField(file.FieldOriginalName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.NormalizedName(); ok {
		_spec.SetField(file.FieldNormalizedName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Checksum(); ok {
		_spec.SetField(file.FieldChecksum, field.TypeString, value)
	}
	if value, ok := fuo.mutation.SizeBytes(); ok {
		_spec.SetField(file.FieldSizeBytes, field.TypeInt64, value)
	}
	if value, ok := fuo.mutation.AddedSizeBytes(); ok {
		_spec.AddField(file.FieldSizeBytes, field.TypeInt64, value)
	}
	if value, ok := fuo.mutation.MimeType(); ok {
		_spec.SetField(file.FieldMimeType, field.TypeString, value)
	}
	if fuo.mutation.MimeTypeCleared() {
		_spec.ClearField(file.FieldMimeType, field.TypeString)
	}
	if value, ok := fuo.mutation.Format(); ok {
		_spec.SetField(file.FieldFormat, field.TypeString, value)
	}
	if fuo.mutation.FormatCleared() {
		_spec.ClearField(file.FieldFormat, field.TypeString)
	}
	if value, ok := fuo.mutation.Source(); ok {
		_spec.SetField(file.FieldSource, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Quarantine(); ok {
		_spec.SetField(file.FieldQuarantine, field.TypeBool, value)
	}
	if fuo.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.GameTable,
			Columns: []string{file.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.GameTable,
			Columns: []string{file.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &File{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
