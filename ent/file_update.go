// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/deicod/archivedgames/ent/comment"
	"github.com/deicod/archivedgames/ent/file"
	"github.com/deicod/archivedgames/ent/filegroup"
	"github.com/deicod/archivedgames/ent/filereaction"
	"github.com/deicod/archivedgames/ent/game"
	"github.com/deicod/archivedgames/ent/predicate"
)

// FileUpdate is the builder for updating File entities.
type FileUpdate struct {
	config
	hooks    []Hook
	mutation *FileMutation
}

// Where appends a list predicates to the FileUpdate builder.
func (_u *FileUpdate) Where(ps ...predicate.File) *FileUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetPath sets the "path" field.
func (_u *FileUpdate) SetPath(v string) *FileUpdate {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *FileUpdate) SetNillablePath(v *string) *FileUpdate {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// SetOriginalName sets the "original_name" field.
func (_u *FileUpdate) SetOriginalName(v string) *FileUpdate {
	_u.mutation.SetOriginalName(v)
	return _u
}

// SetNillableOriginalName sets the "original_name" field if the given value is not nil.
func (_u *FileUpdate) SetNillableOriginalName(v *string) *FileUpdate {
	if v != nil {
		_u.SetOriginalName(*v)
	}
	return _u
}

// SetNormalizedName sets the "normalized_name" field.
func (_u *FileUpdate) SetNormalizedName(v string) *FileUpdate {
	_u.mutation.SetNormalizedName(v)
	return _u
}

// SetNillableNormalizedName sets the "normalized_name" field if the given value is not nil.
func (_u *FileUpdate) SetNillableNormalizedName(v *string) *FileUpdate {
	if v != nil {
		_u.SetNormalizedName(*v)
	}
	return _u
}

// SetSetKey sets the "set_key" field.
func (_u *FileUpdate) SetSetKey(v string) *FileUpdate {
	_u.mutation.SetSetKey(v)
	return _u
}

// SetNillableSetKey sets the "set_key" field if the given value is not nil.
func (_u *FileUpdate) SetNillableSetKey(v *string) *FileUpdate {
	if v != nil {
		_u.SetSetKey(*v)
	}
	return _u
}

// ClearSetKey clears the value of the "set_key" field.
func (_u *FileUpdate) ClearSetKey() *FileUpdate {
	_u.mutation.ClearSetKey()
	return _u
}

// SetChecksum sets the "checksum" field.
func (_u *FileUpdate) SetChecksum(v string) *FileUpdate {
	_u.mutation.SetChecksum(v)
	return _u
}

// SetNillableChecksum sets the "checksum" field if the given value is not nil.
func (_u *FileUpdate) SetNillableChecksum(v *string) *FileUpdate {
	if v != nil {
		_u.SetChecksum(*v)
	}
	return _u
}

// SetSizeBytes sets the "size_bytes" field.
func (_u *FileUpdate) SetSizeBytes(v int64) *FileUpdate {
	_u.mutation.ResetSizeBytes()
	_u.mutation.SetSizeBytes(v)
	return _u
}

// SetNillableSizeBytes sets the "size_bytes" field if the given value is not nil.
func (_u *FileUpdate) SetNillableSizeBytes(v *int64) *FileUpdate {
	if v != nil {
		_u.SetSizeBytes(*v)
	}
	return _u
}

// AddSizeBytes adds value to the "size_bytes" field.
func (_u *FileUpdate) AddSizeBytes(v int64) *FileUpdate {
	_u.mutation.AddSizeBytes(v)
	return _u
}

// SetMimeType sets the "mime_type" field.
func (_u *FileUpdate) SetMimeType(v string) *FileUpdate {
	_u.mutation.SetMimeType(v)
	return _u
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (_u *FileUpdate) SetNillableMimeType(v *string) *FileUpdate {
	if v != nil {
		_u.SetMimeType(*v)
	}
	return _u
}

// ClearMimeType clears the value of the "mime_type" field.
func (_u *FileUpdate) ClearMimeType() *FileUpdate {
	_u.mutation.ClearMimeType()
	return _u
}

// SetFormat sets the "format" field.
func (_u *FileUpdate) SetFormat(v string) *FileUpdate {
	_u.mutation.SetFormat(v)
	return _u
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (_u *FileUpdate) SetNillableFormat(v *string) *FileUpdate {
	if v != nil {
		_u.SetFormat(*v)
	}
	return _u
}

// ClearFormat clears the value of the "format" field.
func (_u *FileUpdate) ClearFormat() *FileUpdate {
	_u.mutation.ClearFormat()
	return _u
}

// SetSource sets the "source" field.
func (_u *FileUpdate) SetSource(v string) *FileUpdate {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *FileUpdate) SetNillableSource(v *string) *FileUpdate {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// SetQuarantine sets the "quarantine" field.
func (_u *FileUpdate) SetQuarantine(v bool) *FileUpdate {
	_u.mutation.SetQuarantine(v)
	return _u
}

// SetNillableQuarantine sets the "quarantine" field if the given value is not nil.
func (_u *FileUpdate) SetNillableQuarantine(v *bool) *FileUpdate {
	if v != nil {
		_u.SetQuarantine(*v)
	}
	return _u
}

// SetNeedsReview sets the "needs_review" field.
func (_u *FileUpdate) SetNeedsReview(v bool) *FileUpdate {
	_u.mutation.SetNeedsReview(v)
	return _u
}

// SetNillableNeedsReview sets the "needs_review" field if the given value is not nil.
func (_u *FileUpdate) SetNillableNeedsReview(v *bool) *FileUpdate {
	if v != nil {
		_u.SetNeedsReview(*v)
	}
	return _u
}

// SetDiskNumber sets the "disk_number" field.
func (_u *FileUpdate) SetDiskNumber(v int) *FileUpdate {
	_u.mutation.ResetDiskNumber()
	_u.mutation.SetDiskNumber(v)
	return _u
}

// SetNillableDiskNumber sets the "disk_number" field if the given value is not nil.
func (_u *FileUpdate) SetNillableDiskNumber(v *int) *FileUpdate {
	if v != nil {
		_u.SetDiskNumber(*v)
	}
	return _u
}

// AddDiskNumber adds value to the "disk_number" field.
func (_u *FileUpdate) AddDiskNumber(v int) *FileUpdate {
	_u.mutation.AddDiskNumber(v)
	return _u
}

// ClearDiskNumber clears the value of the "disk_number" field.
func (_u *FileUpdate) ClearDiskNumber() *FileUpdate {
	_u.mutation.ClearDiskNumber()
	return _u
}

// SetSide sets the "side" field.
func (_u *FileUpdate) SetSide(v string) *FileUpdate {
	_u.mutation.SetSide(v)
	return _u
}

// SetNillableSide sets the "side" field if the given value is not nil.
func (_u *FileUpdate) SetNillableSide(v *string) *FileUpdate {
	if v != nil {
		_u.SetSide(*v)
	}
	return _u
}

// ClearSide clears the value of the "side" field.
func (_u *FileUpdate) ClearSide() *FileUpdate {
	_u.mutation.ClearSide()
	return _u
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (_u *FileUpdate) SetGameID(id string) *FileUpdate {
	_u.mutation.SetGameID(id)
	return _u
}

// SetGame sets the "game" edge to the Game entity.
func (_u *FileUpdate) SetGame(v *Game) *FileUpdate {
	return _u.SetGameID(v.ID)
}

// SetGroupID sets the "group" edge to the FileGroup entity by ID.
func (_u *FileUpdate) SetGroupID(id string) *FileUpdate {
	_u.mutation.SetGroupID(id)
	return _u
}

// SetNillableGroupID sets the "group" edge to the FileGroup entity by ID if the given value is not nil.
func (_u *FileUpdate) SetNillableGroupID(id *string) *FileUpdate {
	if id != nil {
		_u = _u.SetGroupID(*id)
	}
	return _u
}

// SetGroup sets the "group" edge to the FileGroup entity.
func (_u *FileUpdate) SetGroup(v *FileGroup) *FileUpdate {
	return _u.SetGroupID(v.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (_u *FileUpdate) AddCommentIDs(ids ...string) *FileUpdate {
	_u.mutation.AddCommentIDs(ids...)
	return _u
}

// AddComments adds the "comments" edges to the Comment entity.
func (_u *FileUpdate) AddComments(v ...*Comment) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCommentIDs(ids...)
}

// AddReactionIDs adds the "reactions" edge to the FileReaction entity by IDs.
func (_u *FileUpdate) AddReactionIDs(ids ...string) *FileUpdate {
	_u.mutation.AddReactionIDs(ids...)
	return _u
}

// AddReactions adds the "reactions" edges to the FileReaction entity.
func (_u *FileUpdate) AddReactions(v ...*FileReaction) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddReactionIDs(ids...)
}

// Mutation returns the FileMutation object of the builder.
func (_u *FileUpdate) Mutation() *FileMutation {
	return _u.mutation
}

// ClearGame clears the "game" edge to the Game entity.
func (_u *FileUpdate) ClearGame() *FileUpdate {
	_u.mutation.ClearGame()
	return _u
}

// ClearGroup clears the "group" edge to the FileGroup entity.
func (_u *FileUpdate) ClearGroup() *FileUpdate {
	_u.mutation.ClearGroup()
	return _u
}

// ClearComments clears all "comments" edges to the Comment entity.
func (_u *FileUpdate) ClearComments() *FileUpdate {
	_u.mutation.ClearComments()
	return _u
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (_u *FileUpdate) RemoveCommentIDs(ids ...string) *FileUpdate {
	_u.mutation.RemoveCommentIDs(ids...)
	return _u
}

// RemoveComments removes "comments" edges to Comment entities.
func (_u *FileUpdate) RemoveComments(v ...*Comment) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCommentIDs(ids...)
}

// ClearReactions clears all "reactions" edges to the FileReaction entity.
func (_u *FileUpdate) ClearReactions() *FileUpdate {
	_u.mutation.ClearReactions()
	return _u
}

// RemoveReactionIDs removes the "reactions" edge to FileReaction entities by IDs.
func (_u *FileUpdate) RemoveReactionIDs(ids ...string) *FileUpdate {
	_u.mutation.RemoveReactionIDs(ids...)
	return _u
}

// RemoveReactions removes "reactions" edges to FileReaction entities.
func (_u *FileUpdate) RemoveReactions(v ...*FileReaction) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveReactionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *FileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FileUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *FileUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FileUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *FileUpdate) check() error {
	if _u.mutation.GameCleared() && len(_u.mutation.GameIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "File.game"`)
	}
	return nil
}

func (_u *FileUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(file.FieldPath, field.TypeString, value)
	}
	if value, ok := _u.mutation.OriginalName(); ok {
		_spec.SetField(file.FieldOriginalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.NormalizedName(); ok {
		_spec.SetField(file.FieldNormalizedName, field.TypeString, value)
	}
	if value, ok := _u.mutation.SetKey(); ok {
		_spec.SetField(file.FieldSetKey, field.TypeString, value)
	}
	if _u.mutation.SetKeyCleared() {
		_spec.ClearField(file.FieldSetKey, field.TypeString)
	}
	if value, ok := _u.mutation.Checksum(); ok {
		_spec.SetField(file.FieldChecksum, field.TypeString, value)
	}
	if value, ok := _u.mutation.SizeBytes(); ok {
		_spec.SetField(file.FieldSizeBytes, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedSizeBytes(); ok {
		_spec.AddField(file.FieldSizeBytes, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.MimeType(); ok {
		_spec.SetField(file.FieldMimeType, field.TypeString, value)
	}
	if _u.mutation.MimeTypeCleared() {
		_spec.ClearField(file.FieldMimeType, field.TypeString)
	}
	if value, ok := _u.mutation.Format(); ok {
		_spec.SetField(file.FieldFormat, field.TypeString, value)
	}
	if _u.mutation.FormatCleared() {
		_spec.ClearField(file.FieldFormat, field.TypeString)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(file.FieldSource, field.TypeString, value)
	}
	if value, ok := _u.mutation.Quarantine(); ok {
		_spec.SetField(file.FieldQuarantine, field.TypeBool, value)
	}
	if value, ok := _u.mutation.NeedsReview(); ok {
		_spec.SetField(file.FieldNeedsReview, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DiskNumber(); ok {
		_spec.SetField(file.FieldDiskNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDiskNumber(); ok {
		_spec.AddField(file.FieldDiskNumber, field.TypeInt, value)
	}
	if _u.mutation.DiskNumberCleared() {
		_spec.ClearField(file.FieldDiskNumber, field.TypeInt)
	}
	if value, ok := _u.mutation.Side(); ok {
		_spec.SetField(file.FieldSide, field.TypeString, value)
	}
	if _u.mutation.SideCleared() {
		_spec.ClearField(file.FieldSide, field.TypeString)
	}
	if _u.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.GameTable,
			Columns: []string{file.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.GameTable,
			Columns: []string{file.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.GroupTable,
			Columns: []string{file.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filegroup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.GroupTable,
			Columns: []string{file.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filegroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.CommentsTable,
			Columns: []string{file.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !_u.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.CommentsTable,
			Columns: []string{file.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.CommentsTable,
			Columns: []string{file.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ReactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   file.ReactionsTable,
			Columns: []string{file.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filereaction.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedReactionsIDs(); len(nodes) > 0 && !_u.mutation.ReactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   file.ReactionsTable,
			Columns: []string{file.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filereaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   file.ReactionsTable,
			Columns: []string{file.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filereaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// FileUpdateOne is the builder for updating a single File entity.
type FileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileMutation
}

// SetPath sets the "path" field.
func (_u *FileUpdateOne) SetPath(v string) *FileUpdateOne {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillablePath(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// SetOriginalName sets the "original_name" field.
func (_u *FileUpdateOne) SetOriginalName(v string) *FileUpdateOne {
	_u.mutation.SetOriginalName(v)
	return _u
}

// SetNillableOriginalName sets the "original_name" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableOriginalName(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetOriginalName(*v)
	}
	return _u
}

// SetNormalizedName sets the "normalized_name" field.
func (_u *FileUpdateOne) SetNormalizedName(v string) *FileUpdateOne {
	_u.mutation.SetNormalizedName(v)
	return _u
}

// SetNillableNormalizedName sets the "normalized_name" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableNormalizedName(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetNormalizedName(*v)
	}
	return _u
}

// SetSetKey sets the "set_key" field.
func (_u *FileUpdateOne) SetSetKey(v string) *FileUpdateOne {
	_u.mutation.SetSetKey(v)
	return _u
}

// SetNillableSetKey sets the "set_key" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableSetKey(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetSetKey(*v)
	}
	return _u
}

// ClearSetKey clears the value of the "set_key" field.
func (_u *FileUpdateOne) ClearSetKey() *FileUpdateOne {
	_u.mutation.ClearSetKey()
	return _u
}

// SetChecksum sets the "checksum" field.
func (_u *FileUpdateOne) SetChecksum(v string) *FileUpdateOne {
	_u.mutation.SetChecksum(v)
	return _u
}

// SetNillableChecksum sets the "checksum" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableChecksum(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetChecksum(*v)
	}
	return _u
}

// SetSizeBytes sets the "size_bytes" field.
func (_u *FileUpdateOne) SetSizeBytes(v int64) *FileUpdateOne {
	_u.mutation.ResetSizeBytes()
	_u.mutation.SetSizeBytes(v)
	return _u
}

// SetNillableSizeBytes sets the "size_bytes" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableSizeBytes(v *int64) *FileUpdateOne {
	if v != nil {
		_u.SetSizeBytes(*v)
	}
	return _u
}

// AddSizeBytes adds value to the "size_bytes" field.
func (_u *FileUpdateOne) AddSizeBytes(v int64) *FileUpdateOne {
	_u.mutation.AddSizeBytes(v)
	return _u
}

// SetMimeType sets the "mime_type" field.
func (_u *FileUpdateOne) SetMimeType(v string) *FileUpdateOne {
	_u.mutation.SetMimeType(v)
	return _u
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableMimeType(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetMimeType(*v)
	}
	return _u
}

// ClearMimeType clears the value of the "mime_type" field.
func (_u *FileUpdateOne) ClearMimeType() *FileUpdateOne {
	_u.mutation.ClearMimeType()
	return _u
}

// SetFormat sets the "format" field.
func (_u *FileUpdateOne) SetFormat(v string) *FileUpdateOne {
	_u.mutation.SetFormat(v)
	return _u
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableFormat(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetFormat(*v)
	}
	return _u
}

// ClearFormat clears the value of the "format" field.
func (_u *FileUpdateOne) ClearFormat() *FileUpdateOne {
	_u.mutation.ClearFormat()
	return _u
}

// SetSource sets the "source" field.
func (_u *FileUpdateOne) SetSource(v string) *FileUpdateOne {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableSource(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// SetQuarantine sets the "quarantine" field.
func (_u *FileUpdateOne) SetQuarantine(v bool) *FileUpdateOne {
	_u.mutation.SetQuarantine(v)
	return _u
}

// SetNillableQuarantine sets the "quarantine" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableQuarantine(v *bool) *FileUpdateOne {
	if v != nil {
		_u.SetQuarantine(*v)
	}
	return _u
}

// SetNeedsReview sets the "needs_review" field.
func (_u *FileUpdateOne) SetNeedsReview(v bool) *FileUpdateOne {
	_u.mutation.SetNeedsReview(v)
	return _u
}

// SetNillableNeedsReview sets the "needs_review" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableNeedsReview(v *bool) *FileUpdateOne {
	if v != nil {
		_u.SetNeedsReview(*v)
	}
	return _u
}

// SetDiskNumber sets the "disk_number" field.
func (_u *FileUpdateOne) SetDiskNumber(v int) *FileUpdateOne {
	_u.mutation.ResetDiskNumber()
	_u.mutation.SetDiskNumber(v)
	return _u
}

// SetNillableDiskNumber sets the "disk_number" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableDiskNumber(v *int) *FileUpdateOne {
	if v != nil {
		_u.SetDiskNumber(*v)
	}
	return _u
}

// AddDiskNumber adds value to the "disk_number" field.
func (_u *FileUpdateOne) AddDiskNumber(v int) *FileUpdateOne {
	_u.mutation.AddDiskNumber(v)
	return _u
}

// ClearDiskNumber clears the value of the "disk_number" field.
func (_u *FileUpdateOne) ClearDiskNumber() *FileUpdateOne {
	_u.mutation.ClearDiskNumber()
	return _u
}

// SetSide sets the "side" field.
func (_u *FileUpdateOne) SetSide(v string) *FileUpdateOne {
	_u.mutation.SetSide(v)
	return _u
}

// SetNillableSide sets the "side" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableSide(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetSide(*v)
	}
	return _u
}

// ClearSide clears the value of the "side" field.
func (_u *FileUpdateOne) ClearSide() *FileUpdateOne {
	_u.mutation.ClearSide()
	return _u
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (_u *FileUpdateOne) SetGameID(id string) *FileUpdateOne {
	_u.mutation.SetGameID(id)
	return _u
}

// SetGame sets the "game" edge to the Game entity.
func (_u *FileUpdateOne) SetGame(v *Game) *FileUpdateOne {
	return _u.SetGameID(v.ID)
}

// SetGroupID sets the "group" edge to the FileGroup entity by ID.
func (_u *FileUpdateOne) SetGroupID(id string) *FileUpdateOne {
	_u.mutation.SetGroupID(id)
	return _u
}

// SetNillableGroupID sets the "group" edge to the FileGroup entity by ID if the given value is not nil.
func (_u *FileUpdateOne) SetNillableGroupID(id *string) *FileUpdateOne {
	if id != nil {
		_u = _u.SetGroupID(*id)
	}
	return _u
}

// SetGroup sets the "group" edge to the FileGroup entity.
func (_u *FileUpdateOne) SetGroup(v *FileGroup) *FileUpdateOne {
	return _u.SetGroupID(v.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (_u *FileUpdateOne) AddCommentIDs(ids ...string) *FileUpdateOne {
	_u.mutation.AddCommentIDs(ids...)
	return _u
}

// AddComments adds the "comments" edges to the Comment entity.
func (_u *FileUpdateOne) AddComments(v ...*Comment) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCommentIDs(ids...)
}

// AddReactionIDs adds the "reactions" edge to the FileReaction entity by IDs.
func (_u *FileUpdateOne) AddReactionIDs(ids ...string) *FileUpdateOne {
	_u.mutation.AddReactionIDs(ids...)
	return _u
}

// AddReactions adds the "reactions" edges to the FileReaction entity.
func (_u *FileUpdateOne) AddReactions(v ...*FileReaction) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddReactionIDs(ids...)
}

// Mutation returns the FileMutation object of the builder.
func (_u *FileUpdateOne) Mutation() *FileMutation {
	return _u.mutation
}

// ClearGame clears the "game" edge to the Game entity.
func (_u *FileUpdateOne) ClearGame() *FileUpdateOne {
	_u.mutation.ClearGame()
	return _u
}

// ClearGroup clears the "group" edge to the FileGroup entity.
func (_u *FileUpdateOne) ClearGroup() *FileUpdateOne {
	_u.mutation.ClearGroup()
	return _u
}

// ClearComments clears all "comments" edges to the Comment entity.
func (_u *FileUpdateOne) ClearComments() *FileUpdateOne {
	_u.mutation.ClearComments()
	return _u
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (_u *FileUpdateOne) RemoveCommentIDs(ids ...string) *FileUpdateOne {
	_u.mutation.RemoveCommentIDs(ids...)
	return _u
}

// RemoveComments removes "comments" edges to Comment entities.
func (_u *FileUpdateOne) RemoveComments(v ...*Comment) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCommentIDs(ids...)
}

// ClearReactions clears all "reactions" edges to the FileReaction entity.
func (_u *FileUpdateOne) ClearReactions() *FileUpdateOne {
	_u.mutation.ClearReactions()
	return _u
}

// RemoveReactionIDs removes the "reactions" edge to FileReaction entities by IDs.
func (_u *FileUpdateOne) RemoveReactionIDs(ids ...string) *FileUpdateOne {
	_u.mutation.RemoveReactionIDs(ids...)
	return _u
}

// RemoveReactions removes "reactions" edges to FileReaction entities.
func (_u *FileUpdateOne) RemoveReactions(v ...*FileReaction) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveReactionIDs(ids...)
}

// Where appends a list predicates to the FileUpdate builder.
func (_u *FileUpdateOne) Where(ps ...predicate.File) *FileUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *FileUpdateOne) Select(field string, fields ...string) *FileUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated File entity.
func (_u *FileUpdateOne) Save(ctx context.Context) (*File, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FileUpdateOne) SaveX(ctx context.Context) *File {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *FileUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FileUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *FileUpdateOne) check() error {
	if _u.mutation.GameCleared() && len(_u.mutation.GameIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "File.game"`)
	}
	return nil
}

func (_u *FileUpdateOne) sqlSave(ctx context.Context) (_node *File, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "File.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, file.FieldID)
		for _, f := range fields {
			if !file.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != file.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(file.FieldPath, field.TypeString, value)
	}
	if value, ok := _u.mutation.OriginalName(); ok {
		_spec.SetField(file.FieldOriginalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.NormalizedName(); ok {
		_spec.SetField(file.FieldNormalizedName, field.TypeString, value)
	}
	if value, ok := _u.mutation.SetKey(); ok {
		_spec.SetField(file.FieldSetKey, field.TypeString, value)
	}
	if _u.mutation.SetKeyCleared() {
		_spec.ClearField(file.FieldSetKey, field.TypeString)
	}
	if value, ok := _u.mutation.Checksum(); ok {
		_spec.SetField(file.FieldChecksum, field.TypeString, value)
	}
	if value, ok := _u.mutation.SizeBytes(); ok {
		_spec.SetField(file.FieldSizeBytes, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedSizeBytes(); ok {
		_spec.AddField(file.FieldSizeBytes, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.MimeType(); ok {
		_spec.SetField(file.FieldMimeType, field.TypeString, value)
	}
	if _u.mutation.MimeTypeCleared() {
		_spec.ClearField(file.FieldMimeType, field.TypeString)
	}
	if value, ok := _u.mutation.Format(); ok {
		_spec.SetField(file.FieldFormat, field.TypeString, value)
	}
	if _u.mutation.FormatCleared() {
		_spec.ClearField(file.FieldFormat, field.TypeString)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(file.FieldSource, field.TypeString, value)
	}
	if value, ok := _u.mutation.Quarantine(); ok {
		_spec.SetField(file.FieldQuarantine, field.TypeBool, value)
	}
	if value, ok := _u.mutation.NeedsReview(); ok {
		_spec.SetField(file.FieldNeedsReview, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DiskNumber(); ok {
		_spec.SetField(file.FieldDiskNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDiskNumber(); ok {
		_spec.AddField(file.FieldDiskNumber, field.TypeInt, value)
	}
	if _u.mutation.DiskNumberCleared() {
		_spec.ClearField(file.FieldDiskNumber, field.TypeInt)
	}
	if value, ok := _u.mutation.Side(); ok {
		_spec.SetField(file.FieldSide, field.TypeString, value)
	}
	if _u.mutation.SideCleared() {
		_spec.ClearField(file.FieldSide, field.TypeString)
	}
	if _u.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.GameTable,
			Columns: []string{file.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.GameTable,
			Columns: []string{file.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.GroupTable,
			Columns: []string{file.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filegroup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.GroupTable,
			Columns: []string{file.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filegroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.CommentsTable,
			Columns: []string{file.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !_u.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.CommentsTable,
			Columns: []string{file.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.CommentsTable,
			Columns: []string{file.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ReactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   file.ReactionsTable,
			Columns: []string{file.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filereaction.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedReactionsIDs(); len(nodes) > 0 && !_u.mutation.ReactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   file.ReactionsTable,
			Columns: []string{file.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filereaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   file.ReactionsTable,
			Columns: []string{file.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filereaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &File{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
