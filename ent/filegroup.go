// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/deicod/archivedgames/ent/filegroup"
	"github.com/deicod/archivedgames/ent/game"
)

// FileGroup is the model entity for the FileGroup schema.
type FileGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FileGroupQuery when eager-loading is set.
	Edges        FileGroupEdges `json:"edges"`
	game_groups  *string
	selectValues sql.SelectValues
}

// FileGroupEdges holds the relations/edges for other nodes in the graph.
type FileGroupEdges struct {
	// Files holds the value of the files edge.
	Files []*File `json:"files,omitempty"`
	// Game holds the value of the game edge.
	Game *Game `json:"game,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedFiles map[string][]*File
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e FileGroupEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[0] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// GameOrErr returns the Game value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FileGroupEdges) GameOrErr() (*Game, error) {
	if e.Game != nil {
		return e.Game, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: game.Label}
	}
	return nil, &NotLoadedError{edge: "game"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FileGroup) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case filegroup.FieldID, filegroup.FieldKey:
			values[i] = new(sql.NullString)
		case filegroup.ForeignKeys[0]: // game_groups
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FileGroup fields.
func (_m *FileGroup) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case filegroup.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case filegroup.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				_m.Key = value.String
			}
		case filegroup.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field game_groups", values[i])
			} else if value.Valid {
				_m.game_groups = new(string)
				*_m.game_groups = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FileGroup.
// This includes values selected through modifiers, order, etc.
func (_m *FileGroup) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryFiles queries the "files" edge of the FileGroup entity.
func (_m *FileGroup) QueryFiles() *FileQuery {
	return NewFileGroupClient(_m.config).QueryFiles(_m)
}

// QueryGame queries the "game" edge of the FileGroup entity.
func (_m *FileGroup) QueryGame() *GameQuery {
	return NewFileGroupClient(_m.config).QueryGame(_m)
}

// Update returns a builder for updating this FileGroup.
// Note that you need to call FileGroup.Unwrap() before calling this method if this FileGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *FileGroup) Update() *FileGroupUpdateOne {
	return NewFileGroupClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the FileGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *FileGroup) Unwrap() *FileGroup {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: FileGroup is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *FileGroup) String() string {
	var builder strings.Builder
	builder.WriteString("FileGroup(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("key=")
	builder.WriteString(_m.Key)
	builder.WriteByte(')')
	return builder.String()
}

// NamedFiles returns the Files named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *FileGroup) NamedFiles(name string) ([]*File, error) {
	if _m.Edges.namedFiles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedFiles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *FileGroup) appendNamedFiles(name string, edges ...*File) {
	if _m.Edges.namedFiles == nil {
		_m.Edges.namedFiles = make(map[string][]*File)
	}
	if len(edges) == 0 {
		_m.Edges.namedFiles[name] = []*File{}
	} else {
		_m.Edges.namedFiles[name] = append(_m.Edges.namedFiles[name], edges...)
	}
}

// FileGroups is a parsable slice of FileGroup.
type FileGroups []*FileGroup
