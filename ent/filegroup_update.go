// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/deicod/archivedgames/ent/file"
	"github.com/deicod/archivedgames/ent/filegroup"
	"github.com/deicod/archivedgames/ent/game"
	"github.com/deicod/archivedgames/ent/predicate"
)

// FileGroupUpdate is the builder for updating FileGroup entities.
type FileGroupUpdate struct {
	config
	hooks    []Hook
	mutation *FileGroupMutation
}

// Where appends a list predicates to the FileGroupUpdate builder.
func (_u *FileGroupUpdate) Where(ps ...predicate.FileGroup) *FileGroupUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetKey sets the "key" field.
func (_u *FileGroupUpdate) SetKey(v string) *FileGroupUpdate {
	_u.mutation.SetKey(v)
	return _u
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_u *FileGroupUpdate) SetNillableKey(v *string) *FileGroupUpdate {
	if v != nil {
		_u.SetKey(*v)
	}
	return _u
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *FileGroupUpdate) AddFileIDs(ids ...string) *FileGroupUpdate {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *FileGroupUpdate) AddFiles(v ...*File) *FileGroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (_u *FileGroupUpdate) SetGameID(id string) *FileGroupUpdate {
	_u.mutation.SetGameID(id)
	return _u
}

// SetGame sets the "game" edge to the Game entity.
func (_u *FileGroupUpdate) SetGame(v *Game) *FileGroupUpdate {
	return _u.SetGameID(v.ID)
}

// Mutation returns the FileGroupMutation object of the builder.
func (_u *FileGroupUpdate) Mutation() *FileGroupMutation {
	return _u.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *FileGroupUpdate) ClearFiles() *FileGroupUpdate {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *FileGroupUpdate) RemoveFileIDs(ids ...string) *FileGroupUpdate {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *FileGroupUpdate) RemoveFiles(v ...*File) *FileGroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearGame clears the "game" edge to the Game entity.
func (_u *FileGroupUpdate) ClearGame() *FileGroupUpdate {
	_u.mutation.ClearGame()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *FileGroupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FileGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *FileGroupUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FileGroupUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *FileGroupUpdate) check() error {
	if _u.mutation.GameCleared() && len(_u.mutation.GameIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FileGroup.game"`)
	}
	return nil
}

func (_u *FileGroupUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(filegroup.Table, filegroup.Columns, sqlgraph.NewFieldSpec(filegroup.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Key(); ok {
		_spec.SetField(filegroup.FieldKey, field.TypeString, value)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filegroup.FilesTable,
			Columns: []string{filegroup.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filegroup.FilesTable,
			Columns: []string{filegroup.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filegroup.FilesTable,
			Columns: []string{filegroup.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filegroup.GameTable,
			Columns: []string{filegroup.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filegroup.GameTable,
			Columns: []string{filegroup.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filegroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// FileGroupUpdateOne is the builder for updating a single FileGroup entity.
type FileGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileGroupMutation
}

// SetKey sets the "key" field.
func (_u *FileGroupUpdateOne) SetKey(v string) *FileGroupUpdateOne {
	_u.mutation.SetKey(v)
	return _u
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_u *FileGroupUpdateOne) SetNillableKey(v *string) *FileGroupUpdateOne {
	if v != nil {
		_u.SetKey(*v)
	}
	return _u
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *FileGroupUpdateOne) AddFileIDs(ids ...string) *FileGroupUpdateOne {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *FileGroupUpdateOne) AddFiles(v ...*File) *FileGroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (_u *FileGroupUpdateOne) SetGameID(id string) *FileGroupUpdateOne {
	_u.mutation.SetGameID(id)
	return _u
}

// SetGame sets the "game" edge to the Game entity.
func (_u *FileGroupUpdateOne) SetGame(v *Game) *FileGroupUpdateOne {
	return _u.SetGameID(v.ID)
}

// Mutation returns the FileGroupMutation object of the builder.
func (_u *FileGroupUpdateOne) Mutation() *FileGroupMutation {
	return _u.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *FileGroupUpdateOne) ClearFiles() *FileGroupUpdateOne {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *FileGroupUpdateOne) RemoveFileIDs(ids ...string) *FileGroupUpdateOne {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *FileGroupUpdateOne) RemoveFiles(v ...*File) *FileGroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearGame clears the "game" edge to the Game entity.
func (_u *FileGroupUpdateOne) ClearGame() *FileGroupUpdateOne {
	_u.mutation.ClearGame()
	return _u
}

// Where appends a list predicates to the FileGroupUpdate builder.
func (_u *FileGroupUpdateOne) Where(ps ...predicate.FileGroup) *FileGroupUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *FileGroupUpdateOne) Select(field string, fields ...string) *FileGroupUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated FileGroup entity.
func (_u *FileGroupUpdateOne) Save(ctx context.Context) (*FileGroup, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FileGroupUpdateOne) SaveX(ctx context.Context) *FileGroup {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *FileGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FileGroupUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *FileGroupUpdateOne) check() error {
	if _u.mutation.GameCleared() && len(_u.mutation.GameIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FileGroup.game"`)
	}
	return nil
}

func (_u *FileGroupUpdateOne) sqlSave(ctx context.Context) (_node *FileGroup, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(filegroup.Table, filegroup.Columns, sqlgraph.NewFieldSpec(filegroup.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FileGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, filegroup.FieldID)
		for _, f := range fields {
			if !filegroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != filegroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Key(); ok {
		_spec.SetField(filegroup.FieldKey, field.TypeString, value)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filegroup.FilesTable,
			Columns: []string{filegroup.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filegroup.FilesTable,
			Columns: []string{filegroup.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filegroup.FilesTable,
			Columns: []string{filegroup.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filegroup.GameTable,
			Columns: []string{filegroup.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filegroup.GameTable,
			Columns: []string{filegroup.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FileGroup{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filegroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
