// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/deicod/archivedgames/ent/file"
	"github.com/deicod/archivedgames/ent/filereaction"
)

// FileReaction is the model entity for the FileReaction schema.
type FileReaction struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// Value holds the value of the "value" field.
	Value int `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FileReactionQuery when eager-loading is set.
	Edges              FileReactionEdges `json:"edges"`
	file_reaction_file *string
	selectValues       sql.SelectValues
}

// FileReactionEdges holds the relations/edges for other nodes in the graph.
type FileReactionEdges struct {
	// File holds the value of the file edge.
	File *File `json:"file,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// FileOrErr returns the File value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FileReactionEdges) FileOrErr() (*File, error) {
	if e.File != nil {
		return e.File, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: file.Label}
	}
	return nil, &NotLoadedError{edge: "file"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FileReaction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case filereaction.FieldValue:
			values[i] = new(sql.NullInt64)
		case filereaction.FieldID, filereaction.FieldUserID:
			values[i] = new(sql.NullString)
		case filereaction.ForeignKeys[0]: // file_reaction_file
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FileReaction fields.
func (_m *FileReaction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case filereaction.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case filereaction.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = value.String
			}
		case filereaction.FieldValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				_m.Value = int(value.Int64)
			}
		case filereaction.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_reaction_file", values[i])
			} else if value.Valid {
				_m.file_reaction_file = new(string)
				*_m.file_reaction_file = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the FileReaction.
// This includes values selected through modifiers, order, etc.
func (_m *FileReaction) GetValue(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryFile queries the "file" edge of the FileReaction entity.
func (_m *FileReaction) QueryFile() *FileQuery {
	return NewFileReactionClient(_m.config).QueryFile(_m)
}

// Update returns a builder for updating this FileReaction.
// Note that you need to call FileReaction.Unwrap() before calling this method if this FileReaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *FileReaction) Update() *FileReactionUpdateOne {
	return NewFileReactionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the FileReaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *FileReaction) Unwrap() *FileReaction {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: FileReaction is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *FileReaction) String() string {
	var builder strings.Builder
	builder.WriteString("FileReaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("user_id=")
	builder.WriteString(_m.UserID)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", _m.Value))
	builder.WriteByte(')')
	return builder.String()
}

// FileReactions is a parsable slice of FileReaction.
type FileReactions []*FileReaction
