// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/deicod/archivedgames/ent/file"
	"github.com/deicod/archivedgames/ent/filereaction"
	"github.com/deicod/archivedgames/ent/predicate"
)

// FileReactionUpdate is the builder for updating FileReaction entities.
type FileReactionUpdate struct {
	config
	hooks    []Hook
	mutation *FileReactionMutation
}

// Where appends a list predicates to the FileReactionUpdate builder.
func (_u *FileReactionUpdate) Where(ps ...predicate.FileReaction) *FileReactionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *FileReactionUpdate) SetUserID(v string) *FileReactionUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *FileReactionUpdate) SetNillableUserID(v *string) *FileReactionUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *FileReactionUpdate) SetValue(v int) *FileReactionUpdate {
	_u.mutation.ResetValue()
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *FileReactionUpdate) SetNillableValue(v *int) *FileReactionUpdate {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// AddValue adds value to the "value" field.
func (_u *FileReactionUpdate) AddValue(v int) *FileReactionUpdate {
	_u.mutation.AddValue(v)
	return _u
}

// SetFileID sets the "file" edge to the File entity by ID.
func (_u *FileReactionUpdate) SetFileID(id string) *FileReactionUpdate {
	_u.mutation.SetFileID(id)
	return _u
}

// SetFile sets the "file" edge to the File entity.
func (_u *FileReactionUpdate) SetFile(v *File) *FileReactionUpdate {
	return _u.SetFileID(v.ID)
}

// Mutation returns the FileReactionMutation object of the builder.
func (_u *FileReactionUpdate) Mutation() *FileReactionMutation {
	return _u.mutation
}

// ClearFile clears the "file" edge to the File entity.
func (_u *FileReactionUpdate) ClearFile() *FileReactionUpdate {
	_u.mutation.ClearFile()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *FileReactionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FileReactionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *FileReactionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FileReactionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *FileReactionUpdate) check() error {
	if _u.mutation.FileCleared() && len(_u.mutation.FileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FileReaction.file"`)
	}
	return nil
}

func (_u *FileReactionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(filereaction.Table, filereaction.Columns, sqlgraph.NewFieldSpec(filereaction.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(filereaction.FieldUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(filereaction.FieldValue, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedValue(); ok {
		_spec.AddField(filereaction.FieldValue, field.TypeInt, value)
	}
	if _u.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   filereaction.FileTable,
			Columns: []string{filereaction.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   filereaction.FileTable,
			Columns: []string{filereaction.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filereaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// FileReactionUpdateOne is the builder for updating a single FileReaction entity.
type FileReactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileReactionMutation
}

// SetUserID sets the "user_id" field.
func (_u *FileReactionUpdateOne) SetUserID(v string) *FileReactionUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *FileReactionUpdateOne) SetNillableUserID(v *string) *FileReactionUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *FileReactionUpdateOne) SetValue(v int) *FileReactionUpdateOne {
	_u.mutation.ResetValue()
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *FileReactionUpdateOne) SetNillableValue(v *int) *FileReactionUpdateOne {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// AddValue adds value to the "value" field.
func (_u *FileReactionUpdateOne) AddValue(v int) *FileReactionUpdateOne {
	_u.mutation.AddValue(v)
	return _u
}

// SetFileID sets the "file" edge to the File entity by ID.
func (_u *FileReactionUpdateOne) SetFileID(id string) *FileReactionUpdateOne {
	_u.mutation.SetFileID(id)
	return _u
}

// SetFile sets the "file" edge to the File entity.
func (_u *FileReactionUpdateOne) SetFile(v *File) *FileReactionUpdateOne {
	return _u.SetFileID(v.ID)
}

// Mutation returns the FileReactionMutation object of the builder.
func (_u *FileReactionUpdateOne) Mutation() *FileReactionMutation {
	return _u.mutation
}

// ClearFile clears the "file" edge to the File entity.
func (_u *FileReactionUpdateOne) ClearFile() *FileReactionUpdateOne {
	_u.mutation.ClearFile()
	return _u
}

// Where appends a list predicates to the FileReactionUpdate builder.
func (_u *FileReactionUpdateOne) Where(ps ...predicate.FileReaction) *FileReactionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *FileReactionUpdateOne) Select(field string, fields ...string) *FileReactionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated FileReaction entity.
func (_u *FileReactionUpdateOne) Save(ctx context.Context) (*FileReaction, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FileReactionUpdateOne) SaveX(ctx context.Context) *FileReaction {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *FileReactionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FileReactionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *FileReactionUpdateOne) check() error {
	if _u.mutation.FileCleared() && len(_u.mutation.FileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FileReaction.file"`)
	}
	return nil
}

func (_u *FileReactionUpdateOne) sqlSave(ctx context.Context) (_node *FileReaction, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(filereaction.Table, filereaction.Columns, sqlgraph.NewFieldSpec(filereaction.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FileReaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, filereaction.FieldID)
		for _, f := range fields {
			if !filereaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != filereaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(filereaction.FieldUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(filereaction.FieldValue, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedValue(); ok {
		_spec.AddField(filereaction.FieldValue, field.TypeInt, value)
	}
	if _u.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   filereaction.FileTable,
			Columns: []string{filereaction.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   filereaction.FileTable,
			Columns: []string{filereaction.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FileReaction{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filereaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
