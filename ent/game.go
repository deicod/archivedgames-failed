// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/deicod/archivedgames/ent/game"
)

// Game is the model entity for the Game schema.
type Game struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Xid holds the value of the "xid" field.
	Xid string `json:"xid,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform game.Platform `json:"platform,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Year holds the value of the "year" field.
	Year *int `json:"year,omitempty"`
	// Publisher holds the value of the "publisher" field.
	Publisher string `json:"publisher,omitempty"`
	// Developer holds the value of the "developer" field.
	Developer string `json:"developer,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GameQuery when eager-loading is set.
	Edges        GameEdges `json:"edges"`
	selectValues sql.SelectValues
}

// GameEdges holds the relations/edges for other nodes in the graph.
type GameEdges struct {
	// Files holds the value of the files edge.
	Files []*File `json:"files,omitempty"`
	// Images holds the value of the images edge.
	Images []*Image `json:"images,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedFiles  map[string][]*File
	namedImages map[string][]*Image
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e GameEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[0] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// ImagesOrErr returns the Images value or an error if the edge
// was not loaded in eager-loading.
func (e GameEdges) ImagesOrErr() ([]*Image, error) {
	if e.loadedTypes[1] {
		return e.Images, nil
	}
	return nil, &NotLoadedError{edge: "images"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Game) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case game.FieldID, game.FieldYear:
			values[i] = new(sql.NullInt64)
		case game.FieldXid, game.FieldSlug, game.FieldPlatform, game.FieldTitle, game.FieldPublisher, game.FieldDeveloper:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Game fields.
func (ga *Game) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case game.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ga.ID = int(value.Int64)
		case game.FieldXid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field xid", values[i])
			} else if value.Valid {
				ga.Xid = value.String
			}
		case game.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				ga.Slug = value.String
			}
		case game.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				ga.Platform = game.Platform(value.String)
			}
		case game.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ga.Title = value.String
			}
		case game.FieldYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field year", values[i])
			} else if value.Valid {
				ga.Year = new(int)
				*ga.Year = int(value.Int64)
			}
		case game.FieldPublisher:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field publisher", values[i])
			} else if value.Valid {
				ga.Publisher = value.String
			}
		case game.FieldDeveloper:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field developer", values[i])
			} else if value.Valid {
				ga.Developer = value.String
			}
		default:
			ga.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Game.
// This includes values selected through modifiers, order, etc.
func (ga *Game) Value(name string) (ent.Value, error) {
	return ga.selectValues.Get(name)
}

// QueryFiles queries the "files" edge of the Game entity.
func (ga *Game) QueryFiles() *FileQuery {
	return NewGameClient(ga.config).QueryFiles(ga)
}

// QueryImages queries the "images" edge of the Game entity.
func (ga *Game) QueryImages() *ImageQuery {
	return NewGameClient(ga.config).QueryImages(ga)
}

// Update returns a builder for updating this Game.
// Note that you need to call Game.Unwrap() before calling this method if this Game
// was returned from a transaction, and the transaction was committed or rolled back.
func (ga *Game) Update() *GameUpdateOne {
	return NewGameClient(ga.config).UpdateOne(ga)
}

// Unwrap unwraps the Game entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ga *Game) Unwrap() *Game {
	_tx, ok := ga.config.driver.(*txDriver)
	if !ok {
		panic("ent: Game is not a transactional entity")
	}
	ga.config.driver = _tx.drv
	return ga
}

// String implements the fmt.Stringer.
func (ga *Game) String() string {
	var builder strings.Builder
	builder.WriteString("Game(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ga.ID))
	builder.WriteString("xid=")
	builder.WriteString(ga.Xid)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(ga.Slug)
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(fmt.Sprintf("%v", ga.Platform))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(ga.Title)
	builder.WriteString(", ")
	if v := ga.Year; v != nil {
		builder.WriteString("year=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("publisher=")
	builder.WriteString(ga.Publisher)
	builder.WriteString(", ")
	builder.WriteString("developer=")
	builder.WriteString(ga.Developer)
	builder.WriteByte(')')
	return builder.String()
}

// NamedFiles returns the Files named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ga *Game) NamedFiles(name string) ([]*File, error) {
	if ga.Edges.namedFiles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ga.Edges.namedFiles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ga *Game) appendNamedFiles(name string, edges ...*File) {
	if ga.Edges.namedFiles == nil {
		ga.Edges.namedFiles = make(map[string][]*File)
	}
	if len(edges) == 0 {
		ga.Edges.namedFiles[name] = []*File{}
	} else {
		ga.Edges.namedFiles[name] = append(ga.Edges.namedFiles[name], edges...)
	}
}

// NamedImages returns the Images named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ga *Game) NamedImages(name string) ([]*Image, error) {
	if ga.Edges.namedImages == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ga.Edges.namedImages[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ga *Game) appendNamedImages(name string, edges ...*Image) {
	if ga.Edges.namedImages == nil {
		ga.Edges.namedImages = make(map[string][]*Image)
	}
	if len(edges) == 0 {
		ga.Edges.namedImages[name] = []*Image{}
	} else {
		ga.Edges.namedImages[name] = append(ga.Edges.namedImages[name], edges...)
	}
}

// Games is a parsable slice of Game.
type Games []*Game
