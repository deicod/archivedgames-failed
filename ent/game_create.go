// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/deicod/archivedgames/ent/file"
	"github.com/deicod/archivedgames/ent/game"
	"github.com/deicod/archivedgames/ent/image"
)

// GameCreate is the builder for creating a Game entity.
type GameCreate struct {
	config
	mutation *GameMutation
	hooks    []Hook
}

// SetXid sets the "xid" field.
func (gc *GameCreate) SetXid(s string) *GameCreate {
	gc.mutation.SetXid(s)
	return gc
}

// SetNillableXid sets the "xid" field if the given value is not nil.
func (gc *GameCreate) SetNillableXid(s *string) *GameCreate {
	if s != nil {
		gc.SetXid(*s)
	}
	return gc
}

// SetSlug sets the "slug" field.
func (gc *GameCreate) SetSlug(s string) *GameCreate {
	gc.mutation.SetSlug(s)
	return gc
}

// SetPlatform sets the "platform" field.
func (gc *GameCreate) SetPlatform(ga game.Platform) *GameCreate {
	gc.mutation.SetPlatform(ga)
	return gc
}

// SetTitle sets the "title" field.
func (gc *GameCreate) SetTitle(s string) *GameCreate {
	gc.mutation.SetTitle(s)
	return gc
}

// SetYear sets the "year" field.
func (gc *GameCreate) SetYear(i int) *GameCreate {
	gc.mutation.SetYear(i)
	return gc
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (gc *GameCreate) SetNillableYear(i *int) *GameCreate {
	if i != nil {
		gc.SetYear(*i)
	}
	return gc
}

// SetPublisher sets the "publisher" field.
func (gc *GameCreate) SetPublisher(s string) *GameCreate {
	gc.mutation.SetPublisher(s)
	return gc
}

// SetNillablePublisher sets the "publisher" field if the given value is not nil.
func (gc *GameCreate) SetNillablePublisher(s *string) *GameCreate {
	if s != nil {
		gc.SetPublisher(*s)
	}
	return gc
}

// SetDeveloper sets the "developer" field.
func (gc *GameCreate) SetDeveloper(s string) *GameCreate {
	gc.mutation.SetDeveloper(s)
	return gc
}

// SetNillableDeveloper sets the "developer" field if the given value is not nil.
func (gc *GameCreate) SetNillableDeveloper(s *string) *GameCreate {
	if s != nil {
		gc.SetDeveloper(*s)
	}
	return gc
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (gc *GameCreate) AddFileIDs(ids ...int) *GameCreate {
	gc.mutation.AddFileIDs(ids...)
	return gc
}

// AddFiles adds the "files" edges to the File entity.
func (gc *GameCreate) AddFiles(f ...*File) *GameCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return gc.AddFileIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (gc *GameCreate) AddImageIDs(ids ...int) *GameCreate {
	gc.mutation.AddImageIDs(ids...)
	return gc
}

// AddImages adds the "images" edges to the Image entity.
func (gc *GameCreate) AddImages(i ...*Image) *GameCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return gc.AddImageIDs(ids...)
}

// Mutation returns the GameMutation object of the builder.
func (gc *GameCreate) Mutation() *GameMutation {
	return gc.mutation
}

// Save creates the Game in the database.
func (gc *GameCreate) Save(ctx context.Context) (*Game, error) {
	gc.defaults()
	return withHooks(ctx, gc.sqlSave, gc.mutation, gc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GameCreate) SaveX(ctx context.Context) *Game {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GameCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GameCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GameCreate) defaults() {
	if _, ok := gc.mutation.Xid(); !ok {
		v := game.DefaultXid()
		gc.mutation.SetXid(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GameCreate) check() error {
	if _, ok := gc.mutation.Xid(); !ok {
		return &ValidationError{Name: "xid", err: errors.New(`ent: missing required field "Game.xid"`)}
	}
	if _, ok := gc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Game.slug"`)}
	}
	if _, ok := gc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "Game.platform"`)}
	}
	if v, ok := gc.mutation.Platform(); ok {
		if err := game.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "Game.platform": %w`, err)}
		}
	}
	if _, ok := gc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Game.title"`)}
	}
	return nil
}

func (gc *GameCreate) sqlSave(ctx context.Context) (*Game, error) {
	if err := gc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gc.mutation.id = &_node.ID
	gc.mutation.done = true
	return _node, nil
}

func (gc *GameCreate) createSpec() (*Game, *sqlgraph.CreateSpec) {
	var (
		_node = &Game{config: gc.config}
		_spec = sqlgraph.NewCreateSpec(game.Table, sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt))
	)
	if value, ok := gc.mutation.Xid(); ok {
		_spec.SetField(game.FieldXid, field.TypeString, value)
		_node.Xid = value
	}
	if value, ok := gc.mutation.Slug(); ok {
		_spec.SetField(game.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := gc.mutation.Platform(); ok {
		_spec.SetField(game.FieldPlatform, field.TypeEnum, value)
		_node.Platform = value
	}
	if value, ok := gc.mutation.Title(); ok {
		_spec.SetField(game.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := gc.mutation.Year(); ok {
		_spec.SetField(game.FieldYear, field.TypeInt, value)
		_node.Year = &value
	}
	if value, ok := gc.mutation.Publisher(); ok {
		_spec.SetField(game.FieldPublisher, field.TypeString, value)
		_node.Publisher = value
	}
	if value, ok := gc.mutation.Developer(); ok {
		_spec.SetField(game.FieldDeveloper, field.TypeString, value)
		_node.Developer = value
	}
	if nodes := gc.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.FilesTable,
			Columns: []string{game.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.ImagesTable,
			Columns: []string{game.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GameCreateBulk is the builder for creating many Game entities in bulk.
type GameCreateBulk struct {
	config
	err      error
	builders []*GameCreate
}

// Save creates the Game entities in the database.
func (gcb *GameCreateBulk) Save(ctx context.Context) ([]*Game, error) {
	if gcb.err != nil {
		return nil, gcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Game, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GameMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GameCreateBulk) SaveX(ctx context.Context) []*Game {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GameCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GameCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}
