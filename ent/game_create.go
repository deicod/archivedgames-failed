// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/deicod/archivedgames/ent/comment"
	"github.com/deicod/archivedgames/ent/file"
	"github.com/deicod/archivedgames/ent/filegroup"
	"github.com/deicod/archivedgames/ent/game"
	"github.com/deicod/archivedgames/ent/gamelike"
	"github.com/deicod/archivedgames/ent/image"
)

// GameCreate is the builder for creating a Game entity.
type GameCreate struct {
	config
	mutation *GameMutation
	hooks    []Hook
}

// SetSlug sets the "slug" field.
func (_c *GameCreate) SetSlug(v string) *GameCreate {
	_c.mutation.SetSlug(v)
	return _c
}

// SetPlatform sets the "platform" field.
func (_c *GameCreate) SetPlatform(v game.Platform) *GameCreate {
	_c.mutation.SetPlatform(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *GameCreate) SetTitle(v string) *GameCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetYear sets the "year" field.
func (_c *GameCreate) SetYear(v int) *GameCreate {
	_c.mutation.SetYear(v)
	return _c
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (_c *GameCreate) SetNillableYear(v *int) *GameCreate {
	if v != nil {
		_c.SetYear(*v)
	}
	return _c
}

// SetPublisher sets the "publisher" field.
func (_c *GameCreate) SetPublisher(v string) *GameCreate {
	_c.mutation.SetPublisher(v)
	return _c
}

// SetNillablePublisher sets the "publisher" field if the given value is not nil.
func (_c *GameCreate) SetNillablePublisher(v *string) *GameCreate {
	if v != nil {
		_c.SetPublisher(*v)
	}
	return _c
}

// SetDeveloper sets the "developer" field.
func (_c *GameCreate) SetDeveloper(v string) *GameCreate {
	_c.mutation.SetDeveloper(v)
	return _c
}

// SetNillableDeveloper sets the "developer" field if the given value is not nil.
func (_c *GameCreate) SetNillableDeveloper(v *string) *GameCreate {
	if v != nil {
		_c.SetDeveloper(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *GameCreate) SetID(v string) *GameCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *GameCreate) SetNillableID(v *string) *GameCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_c *GameCreate) AddFileIDs(ids ...string) *GameCreate {
	_c.mutation.AddFileIDs(ids...)
	return _c
}

// AddFiles adds the "files" edges to the File entity.
func (_c *GameCreate) AddFiles(v ...*File) *GameCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddFileIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (_c *GameCreate) AddImageIDs(ids ...string) *GameCreate {
	_c.mutation.AddImageIDs(ids...)
	return _c
}

// AddImages adds the "images" edges to the Image entity.
func (_c *GameCreate) AddImages(v ...*Image) *GameCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddImageIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (_c *GameCreate) AddCommentIDs(ids ...string) *GameCreate {
	_c.mutation.AddCommentIDs(ids...)
	return _c
}

// AddComments adds the "comments" edges to the Comment entity.
func (_c *GameCreate) AddComments(v ...*Comment) *GameCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddCommentIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the FileGroup entity by IDs.
func (_c *GameCreate) AddGroupIDs(ids ...string) *GameCreate {
	_c.mutation.AddGroupIDs(ids...)
	return _c
}

// AddGroups adds the "groups" edges to the FileGroup entity.
func (_c *GameCreate) AddGroups(v ...*FileGroup) *GameCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddGroupIDs(ids...)
}

// AddLikeIDs adds the "likes" edge to the GameLike entity by IDs.
func (_c *GameCreate) AddLikeIDs(ids ...string) *GameCreate {
	_c.mutation.AddLikeIDs(ids...)
	return _c
}

// AddLikes adds the "likes" edges to the GameLike entity.
func (_c *GameCreate) AddLikes(v ...*GameLike) *GameCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddLikeIDs(ids...)
}

// Mutation returns the GameMutation object of the builder.
func (_c *GameCreate) Mutation() *GameMutation {
	return _c.mutation
}

// Save creates the Game in the database.
func (_c *GameCreate) Save(ctx context.Context) (*Game, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *GameCreate) SaveX(ctx context.Context) *Game {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *GameCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *GameCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *GameCreate) defaults() {
	if _, ok := _c.mutation.ID(); !ok {
		v := game.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *GameCreate) check() error {
	if _, ok := _c.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Game.slug"`)}
	}
	if _, ok := _c.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "Game.platform"`)}
	}
	if v, ok := _c.mutation.Platform(); ok {
		if err := game.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "Game.platform": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Game.title"`)}
	}
	return nil
}

func (_c *GameCreate) sqlSave(ctx context.Context) (*Game, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Game.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *GameCreate) createSpec() (*Game, *sqlgraph.CreateSpec) {
	var (
		_node = &Game{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(game.Table, sqlgraph.NewFieldSpec(game.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Slug(); ok {
		_spec.SetField(game.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := _c.mutation.Platform(); ok {
		_spec.SetField(game.FieldPlatform, field.TypeEnum, value)
		_node.Platform = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(game.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Year(); ok {
		_spec.SetField(game.FieldYear, field.TypeInt, value)
		_node.Year = &value
	}
	if value, ok := _c.mutation.Publisher(); ok {
		_spec.SetField(game.FieldPublisher, field.TypeString, value)
		_node.Publisher = value
	}
	if value, ok := _c.mutation.Developer(); ok {
		_spec.SetField(game.FieldDeveloper, field.TypeString, value)
		_node.Developer = value
	}
	if nodes := _c.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.FilesTable,
			Columns: []string{game.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.ImagesTable,
			Columns: []string{game.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.CommentsTable,
			Columns: []string{game.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GroupsTable,
			Columns: []string{game.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filegroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   game.LikesTable,
			Columns: []string{game.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamelike.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GameCreateBulk is the builder for creating many Game entities in bulk.
type GameCreateBulk struct {
	config
	err      error
	builders []*GameCreate
}

// Save creates the Game entities in the database.
func (_c *GameCreateBulk) Save(ctx context.Context) ([]*Game, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Game, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GameMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *GameCreateBulk) SaveX(ctx context.Context) []*Game {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *GameCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *GameCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
