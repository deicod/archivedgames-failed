// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/deicod/archivedgames/ent/comment"
	"github.com/deicod/archivedgames/ent/file"
	"github.com/deicod/archivedgames/ent/filegroup"
	"github.com/deicod/archivedgames/ent/game"
	"github.com/deicod/archivedgames/ent/gamelike"
	"github.com/deicod/archivedgames/ent/image"
	"github.com/deicod/archivedgames/ent/predicate"
)

// GameUpdate is the builder for updating Game entities.
type GameUpdate struct {
	config
	hooks    []Hook
	mutation *GameMutation
}

// Where appends a list predicates to the GameUpdate builder.
func (_u *GameUpdate) Where(ps ...predicate.Game) *GameUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetSlug sets the "slug" field.
func (_u *GameUpdate) SetSlug(v string) *GameUpdate {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *GameUpdate) SetNillableSlug(v *string) *GameUpdate {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetPlatform sets the "platform" field.
func (_u *GameUpdate) SetPlatform(v game.Platform) *GameUpdate {
	_u.mutation.SetPlatform(v)
	return _u
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (_u *GameUpdate) SetNillablePlatform(v *game.Platform) *GameUpdate {
	if v != nil {
		_u.SetPlatform(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *GameUpdate) SetTitle(v string) *GameUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *GameUpdate) SetNillableTitle(v *string) *GameUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetYear sets the "year" field.
func (_u *GameUpdate) SetYear(v int) *GameUpdate {
	_u.mutation.ResetYear()
	_u.mutation.SetYear(v)
	return _u
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (_u *GameUpdate) SetNillableYear(v *int) *GameUpdate {
	if v != nil {
		_u.SetYear(*v)
	}
	return _u
}

// AddYear adds value to the "year" field.
func (_u *GameUpdate) AddYear(v int) *GameUpdate {
	_u.mutation.AddYear(v)
	return _u
}

// ClearYear clears the value of the "year" field.
func (_u *GameUpdate) ClearYear() *GameUpdate {
	_u.mutation.ClearYear()
	return _u
}

// SetPublisher sets the "publisher" field.
func (_u *GameUpdate) SetPublisher(v string) *GameUpdate {
	_u.mutation.SetPublisher(v)
	return _u
}

// SetNillablePublisher sets the "publisher" field if the given value is not nil.
func (_u *GameUpdate) SetNillablePublisher(v *string) *GameUpdate {
	if v != nil {
		_u.SetPublisher(*v)
	}
	return _u
}

// ClearPublisher clears the value of the "publisher" field.
func (_u *GameUpdate) ClearPublisher() *GameUpdate {
	_u.mutation.ClearPublisher()
	return _u
}

// SetDeveloper sets the "developer" field.
func (_u *GameUpdate) SetDeveloper(v string) *GameUpdate {
	_u.mutation.SetDeveloper(v)
	return _u
}

// SetNillableDeveloper sets the "developer" field if the given value is not nil.
func (_u *GameUpdate) SetNillableDeveloper(v *string) *GameUpdate {
	if v != nil {
		_u.SetDeveloper(*v)
	}
	return _u
}

// ClearDeveloper clears the value of the "developer" field.
func (_u *GameUpdate) ClearDeveloper() *GameUpdate {
	_u.mutation.ClearDeveloper()
	return _u
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *GameUpdate) AddFileIDs(ids ...string) *GameUpdate {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *GameUpdate) AddFiles(v ...*File) *GameUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (_u *GameUpdate) AddImageIDs(ids ...string) *GameUpdate {
	_u.mutation.AddImageIDs(ids...)
	return _u
}

// AddImages adds the "images" edges to the Image entity.
func (_u *GameUpdate) AddImages(v ...*Image) *GameUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddImageIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (_u *GameUpdate) AddCommentIDs(ids ...string) *GameUpdate {
	_u.mutation.AddCommentIDs(ids...)
	return _u
}

// AddComments adds the "comments" edges to the Comment entity.
func (_u *GameUpdate) AddComments(v ...*Comment) *GameUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCommentIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the FileGroup entity by IDs.
func (_u *GameUpdate) AddGroupIDs(ids ...string) *GameUpdate {
	_u.mutation.AddGroupIDs(ids...)
	return _u
}

// AddGroups adds the "groups" edges to the FileGroup entity.
func (_u *GameUpdate) AddGroups(v ...*FileGroup) *GameUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGroupIDs(ids...)
}

// AddLikeIDs adds the "likes" edge to the GameLike entity by IDs.
func (_u *GameUpdate) AddLikeIDs(ids ...string) *GameUpdate {
	_u.mutation.AddLikeIDs(ids...)
	return _u
}

// AddLikes adds the "likes" edges to the GameLike entity.
func (_u *GameUpdate) AddLikes(v ...*GameLike) *GameUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddLikeIDs(ids...)
}

// Mutation returns the GameMutation object of the builder.
func (_u *GameUpdate) Mutation() *GameMutation {
	return _u.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *GameUpdate) ClearFiles() *GameUpdate {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *GameUpdate) RemoveFileIDs(ids ...string) *GameUpdate {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *GameUpdate) RemoveFiles(v ...*File) *GameUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearImages clears all "images" edges to the Image entity.
func (_u *GameUpdate) ClearImages() *GameUpdate {
	_u.mutation.ClearImages()
	return _u
}

// RemoveImageIDs removes the "images" edge to Image entities by IDs.
func (_u *GameUpdate) RemoveImageIDs(ids ...string) *GameUpdate {
	_u.mutation.RemoveImageIDs(ids...)
	return _u
}

// RemoveImages removes "images" edges to Image entities.
func (_u *GameUpdate) RemoveImages(v ...*Image) *GameUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveImageIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (_u *GameUpdate) ClearComments() *GameUpdate {
	_u.mutation.ClearComments()
	return _u
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (_u *GameUpdate) RemoveCommentIDs(ids ...string) *GameUpdate {
	_u.mutation.RemoveCommentIDs(ids...)
	return _u
}

// RemoveComments removes "comments" edges to Comment entities.
func (_u *GameUpdate) RemoveComments(v ...*Comment) *GameUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCommentIDs(ids...)
}

// ClearGroups clears all "groups" edges to the FileGroup entity.
func (_u *GameUpdate) ClearGroups() *GameUpdate {
	_u.mutation.ClearGroups()
	return _u
}

// RemoveGroupIDs removes the "groups" edge to FileGroup entities by IDs.
func (_u *GameUpdate) RemoveGroupIDs(ids ...string) *GameUpdate {
	_u.mutation.RemoveGroupIDs(ids...)
	return _u
}

// RemoveGroups removes "groups" edges to FileGroup entities.
func (_u *GameUpdate) RemoveGroups(v ...*FileGroup) *GameUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGroupIDs(ids...)
}

// ClearLikes clears all "likes" edges to the GameLike entity.
func (_u *GameUpdate) ClearLikes() *GameUpdate {
	_u.mutation.ClearLikes()
	return _u
}

// RemoveLikeIDs removes the "likes" edge to GameLike entities by IDs.
func (_u *GameUpdate) RemoveLikeIDs(ids ...string) *GameUpdate {
	_u.mutation.RemoveLikeIDs(ids...)
	return _u
}

// RemoveLikes removes "likes" edges to GameLike entities.
func (_u *GameUpdate) RemoveLikes(v ...*GameLike) *GameUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveLikeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *GameUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GameUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *GameUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GameUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *GameUpdate) check() error {
	if v, ok := _u.mutation.Platform(); ok {
		if err := game.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "Game.platform": %w`, err)}
		}
	}
	return nil
}

func (_u *GameUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(game.Table, game.Columns, sqlgraph.NewFieldSpec(game.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(game.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Platform(); ok {
		_spec.SetField(game.FieldPlatform, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(game.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Year(); ok {
		_spec.SetField(game.FieldYear, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedYear(); ok {
		_spec.AddField(game.FieldYear, field.TypeInt, value)
	}
	if _u.mutation.YearCleared() {
		_spec.ClearField(game.FieldYear, field.TypeInt)
	}
	if value, ok := _u.mutation.Publisher(); ok {
		_spec.SetField(game.FieldPublisher, field.TypeString, value)
	}
	if _u.mutation.PublisherCleared() {
		_spec.ClearField(game.FieldPublisher, field.TypeString)
	}
	if value, ok := _u.mutation.Developer(); ok {
		_spec.SetField(game.FieldDeveloper, field.TypeString, value)
	}
	if _u.mutation.DeveloperCleared() {
		_spec.ClearField(game.FieldDeveloper, field.TypeString)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.FilesTable,
			Columns: []string{game.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.FilesTable,
			Columns: []string{game.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.FilesTable,
			Columns: []string{game.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.ImagesTable,
			Columns: []string{game.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedImagesIDs(); len(nodes) > 0 && !_u.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.ImagesTable,
			Columns: []string{game.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.ImagesTable,
			Columns: []string{game.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.CommentsTable,
			Columns: []string{game.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !_u.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.CommentsTable,
			Columns: []string{game.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.CommentsTable,
			Columns: []string{game.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GroupsTable,
			Columns: []string{game.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filegroup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !_u.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GroupsTable,
			Columns: []string{game.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filegroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GroupsTable,
			Columns: []string{game.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filegroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   game.LikesTable,
			Columns: []string{game.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamelike.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedLikesIDs(); len(nodes) > 0 && !_u.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   game.LikesTable,
			Columns: []string{game.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamelike.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   game.LikesTable,
			Columns: []string{game.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamelike.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{game.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// GameUpdateOne is the builder for updating a single Game entity.
type GameUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GameMutation
}

// SetSlug sets the "slug" field.
func (_u *GameUpdateOne) SetSlug(v string) *GameUpdateOne {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *GameUpdateOne) SetNillableSlug(v *string) *GameUpdateOne {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetPlatform sets the "platform" field.
func (_u *GameUpdateOne) SetPlatform(v game.Platform) *GameUpdateOne {
	_u.mutation.SetPlatform(v)
	return _u
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (_u *GameUpdateOne) SetNillablePlatform(v *game.Platform) *GameUpdateOne {
	if v != nil {
		_u.SetPlatform(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *GameUpdateOne) SetTitle(v string) *GameUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *GameUpdateOne) SetNillableTitle(v *string) *GameUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetYear sets the "year" field.
func (_u *GameUpdateOne) SetYear(v int) *GameUpdateOne {
	_u.mutation.ResetYear()
	_u.mutation.SetYear(v)
	return _u
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (_u *GameUpdateOne) SetNillableYear(v *int) *GameUpdateOne {
	if v != nil {
		_u.SetYear(*v)
	}
	return _u
}

// AddYear adds value to the "year" field.
func (_u *GameUpdateOne) AddYear(v int) *GameUpdateOne {
	_u.mutation.AddYear(v)
	return _u
}

// ClearYear clears the value of the "year" field.
func (_u *GameUpdateOne) ClearYear() *GameUpdateOne {
	_u.mutation.ClearYear()
	return _u
}

// SetPublisher sets the "publisher" field.
func (_u *GameUpdateOne) SetPublisher(v string) *GameUpdateOne {
	_u.mutation.SetPublisher(v)
	return _u
}

// SetNillablePublisher sets the "publisher" field if the given value is not nil.
func (_u *GameUpdateOne) SetNillablePublisher(v *string) *GameUpdateOne {
	if v != nil {
		_u.SetPublisher(*v)
	}
	return _u
}

// ClearPublisher clears the value of the "publisher" field.
func (_u *GameUpdateOne) ClearPublisher() *GameUpdateOne {
	_u.mutation.ClearPublisher()
	return _u
}

// SetDeveloper sets the "developer" field.
func (_u *GameUpdateOne) SetDeveloper(v string) *GameUpdateOne {
	_u.mutation.SetDeveloper(v)
	return _u
}

// SetNillableDeveloper sets the "developer" field if the given value is not nil.
func (_u *GameUpdateOne) SetNillableDeveloper(v *string) *GameUpdateOne {
	if v != nil {
		_u.SetDeveloper(*v)
	}
	return _u
}

// ClearDeveloper clears the value of the "developer" field.
func (_u *GameUpdateOne) ClearDeveloper() *GameUpdateOne {
	_u.mutation.ClearDeveloper()
	return _u
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *GameUpdateOne) AddFileIDs(ids ...string) *GameUpdateOne {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *GameUpdateOne) AddFiles(v ...*File) *GameUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (_u *GameUpdateOne) AddImageIDs(ids ...string) *GameUpdateOne {
	_u.mutation.AddImageIDs(ids...)
	return _u
}

// AddImages adds the "images" edges to the Image entity.
func (_u *GameUpdateOne) AddImages(v ...*Image) *GameUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddImageIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (_u *GameUpdateOne) AddCommentIDs(ids ...string) *GameUpdateOne {
	_u.mutation.AddCommentIDs(ids...)
	return _u
}

// AddComments adds the "comments" edges to the Comment entity.
func (_u *GameUpdateOne) AddComments(v ...*Comment) *GameUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCommentIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the FileGroup entity by IDs.
func (_u *GameUpdateOne) AddGroupIDs(ids ...string) *GameUpdateOne {
	_u.mutation.AddGroupIDs(ids...)
	return _u
}

// AddGroups adds the "groups" edges to the FileGroup entity.
func (_u *GameUpdateOne) AddGroups(v ...*FileGroup) *GameUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGroupIDs(ids...)
}

// AddLikeIDs adds the "likes" edge to the GameLike entity by IDs.
func (_u *GameUpdateOne) AddLikeIDs(ids ...string) *GameUpdateOne {
	_u.mutation.AddLikeIDs(ids...)
	return _u
}

// AddLikes adds the "likes" edges to the GameLike entity.
func (_u *GameUpdateOne) AddLikes(v ...*GameLike) *GameUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddLikeIDs(ids...)
}

// Mutation returns the GameMutation object of the builder.
func (_u *GameUpdateOne) Mutation() *GameMutation {
	return _u.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *GameUpdateOne) ClearFiles() *GameUpdateOne {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *GameUpdateOne) RemoveFileIDs(ids ...string) *GameUpdateOne {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *GameUpdateOne) RemoveFiles(v ...*File) *GameUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearImages clears all "images" edges to the Image entity.
func (_u *GameUpdateOne) ClearImages() *GameUpdateOne {
	_u.mutation.ClearImages()
	return _u
}

// RemoveImageIDs removes the "images" edge to Image entities by IDs.
func (_u *GameUpdateOne) RemoveImageIDs(ids ...string) *GameUpdateOne {
	_u.mutation.RemoveImageIDs(ids...)
	return _u
}

// RemoveImages removes "images" edges to Image entities.
func (_u *GameUpdateOne) RemoveImages(v ...*Image) *GameUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveImageIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (_u *GameUpdateOne) ClearComments() *GameUpdateOne {
	_u.mutation.ClearComments()
	return _u
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (_u *GameUpdateOne) RemoveCommentIDs(ids ...string) *GameUpdateOne {
	_u.mutation.RemoveCommentIDs(ids...)
	return _u
}

// RemoveComments removes "comments" edges to Comment entities.
func (_u *GameUpdateOne) RemoveComments(v ...*Comment) *GameUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCommentIDs(ids...)
}

// ClearGroups clears all "groups" edges to the FileGroup entity.
func (_u *GameUpdateOne) ClearGroups() *GameUpdateOne {
	_u.mutation.ClearGroups()
	return _u
}

// RemoveGroupIDs removes the "groups" edge to FileGroup entities by IDs.
func (_u *GameUpdateOne) RemoveGroupIDs(ids ...string) *GameUpdateOne {
	_u.mutation.RemoveGroupIDs(ids...)
	return _u
}

// RemoveGroups removes "groups" edges to FileGroup entities.
func (_u *GameUpdateOne) RemoveGroups(v ...*FileGroup) *GameUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGroupIDs(ids...)
}

// ClearLikes clears all "likes" edges to the GameLike entity.
func (_u *GameUpdateOne) ClearLikes() *GameUpdateOne {
	_u.mutation.ClearLikes()
	return _u
}

// RemoveLikeIDs removes the "likes" edge to GameLike entities by IDs.
func (_u *GameUpdateOne) RemoveLikeIDs(ids ...string) *GameUpdateOne {
	_u.mutation.RemoveLikeIDs(ids...)
	return _u
}

// RemoveLikes removes "likes" edges to GameLike entities.
func (_u *GameUpdateOne) RemoveLikes(v ...*GameLike) *GameUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveLikeIDs(ids...)
}

// Where appends a list predicates to the GameUpdate builder.
func (_u *GameUpdateOne) Where(ps ...predicate.Game) *GameUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *GameUpdateOne) Select(field string, fields ...string) *GameUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Game entity.
func (_u *GameUpdateOne) Save(ctx context.Context) (*Game, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GameUpdateOne) SaveX(ctx context.Context) *Game {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *GameUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GameUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *GameUpdateOne) check() error {
	if v, ok := _u.mutation.Platform(); ok {
		if err := game.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "Game.platform": %w`, err)}
		}
	}
	return nil
}

func (_u *GameUpdateOne) sqlSave(ctx context.Context) (_node *Game, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(game.Table, game.Columns, sqlgraph.NewFieldSpec(game.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Game.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, game.FieldID)
		for _, f := range fields {
			if !game.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != game.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(game.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Platform(); ok {
		_spec.SetField(game.FieldPlatform, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(game.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Year(); ok {
		_spec.SetField(game.FieldYear, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedYear(); ok {
		_spec.AddField(game.FieldYear, field.TypeInt, value)
	}
	if _u.mutation.YearCleared() {
		_spec.ClearField(game.FieldYear, field.TypeInt)
	}
	if value, ok := _u.mutation.Publisher(); ok {
		_spec.SetField(game.FieldPublisher, field.TypeString, value)
	}
	if _u.mutation.PublisherCleared() {
		_spec.ClearField(game.FieldPublisher, field.TypeString)
	}
	if value, ok := _u.mutation.Developer(); ok {
		_spec.SetField(game.FieldDeveloper, field.TypeString, value)
	}
	if _u.mutation.DeveloperCleared() {
		_spec.ClearField(game.FieldDeveloper, field.TypeString)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.FilesTable,
			Columns: []string{game.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.FilesTable,
			Columns: []string{game.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.FilesTable,
			Columns: []string{game.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.ImagesTable,
			Columns: []string{game.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedImagesIDs(); len(nodes) > 0 && !_u.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.ImagesTable,
			Columns: []string{game.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.ImagesTable,
			Columns: []string{game.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.CommentsTable,
			Columns: []string{game.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !_u.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.CommentsTable,
			Columns: []string{game.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.CommentsTable,
			Columns: []string{game.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GroupsTable,
			Columns: []string{game.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filegroup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !_u.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GroupsTable,
			Columns: []string{game.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filegroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GroupsTable,
			Columns: []string{game.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filegroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   game.LikesTable,
			Columns: []string{game.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamelike.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedLikesIDs(); len(nodes) > 0 && !_u.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   game.LikesTable,
			Columns: []string{game.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamelike.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   game.LikesTable,
			Columns: []string{game.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamelike.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Game{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{game.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
