// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/deicod/archivedgames/ent/file"
	"github.com/deicod/archivedgames/ent/game"
	"github.com/deicod/archivedgames/ent/image"
	"github.com/deicod/archivedgames/ent/predicate"
)

// GameUpdate is the builder for updating Game entities.
type GameUpdate struct {
	config
	hooks    []Hook
	mutation *GameMutation
}

// Where appends a list predicates to the GameUpdate builder.
func (gu *GameUpdate) Where(ps ...predicate.Game) *GameUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetSlug sets the "slug" field.
func (gu *GameUpdate) SetSlug(s string) *GameUpdate {
	gu.mutation.SetSlug(s)
	return gu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (gu *GameUpdate) SetNillableSlug(s *string) *GameUpdate {
	if s != nil {
		gu.SetSlug(*s)
	}
	return gu
}

// SetPlatform sets the "platform" field.
func (gu *GameUpdate) SetPlatform(ga game.Platform) *GameUpdate {
	gu.mutation.SetPlatform(ga)
	return gu
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (gu *GameUpdate) SetNillablePlatform(ga *game.Platform) *GameUpdate {
	if ga != nil {
		gu.SetPlatform(*ga)
	}
	return gu
}

// SetTitle sets the "title" field.
func (gu *GameUpdate) SetTitle(s string) *GameUpdate {
	gu.mutation.SetTitle(s)
	return gu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (gu *GameUpdate) SetNillableTitle(s *string) *GameUpdate {
	if s != nil {
		gu.SetTitle(*s)
	}
	return gu
}

// SetYear sets the "year" field.
func (gu *GameUpdate) SetYear(i int) *GameUpdate {
	gu.mutation.ResetYear()
	gu.mutation.SetYear(i)
	return gu
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (gu *GameUpdate) SetNillableYear(i *int) *GameUpdate {
	if i != nil {
		gu.SetYear(*i)
	}
	return gu
}

// AddYear adds i to the "year" field.
func (gu *GameUpdate) AddYear(i int) *GameUpdate {
	gu.mutation.AddYear(i)
	return gu
}

// ClearYear clears the value of the "year" field.
func (gu *GameUpdate) ClearYear() *GameUpdate {
	gu.mutation.ClearYear()
	return gu
}

// SetPublisher sets the "publisher" field.
func (gu *GameUpdate) SetPublisher(s string) *GameUpdate {
	gu.mutation.SetPublisher(s)
	return gu
}

// SetNillablePublisher sets the "publisher" field if the given value is not nil.
func (gu *GameUpdate) SetNillablePublisher(s *string) *GameUpdate {
	if s != nil {
		gu.SetPublisher(*s)
	}
	return gu
}

// ClearPublisher clears the value of the "publisher" field.
func (gu *GameUpdate) ClearPublisher() *GameUpdate {
	gu.mutation.ClearPublisher()
	return gu
}

// SetDeveloper sets the "developer" field.
func (gu *GameUpdate) SetDeveloper(s string) *GameUpdate {
	gu.mutation.SetDeveloper(s)
	return gu
}

// SetNillableDeveloper sets the "developer" field if the given value is not nil.
func (gu *GameUpdate) SetNillableDeveloper(s *string) *GameUpdate {
	if s != nil {
		gu.SetDeveloper(*s)
	}
	return gu
}

// ClearDeveloper clears the value of the "developer" field.
func (gu *GameUpdate) ClearDeveloper() *GameUpdate {
	gu.mutation.ClearDeveloper()
	return gu
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (gu *GameUpdate) AddFileIDs(ids ...int) *GameUpdate {
	gu.mutation.AddFileIDs(ids...)
	return gu
}

// AddFiles adds the "files" edges to the File entity.
func (gu *GameUpdate) AddFiles(f ...*File) *GameUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return gu.AddFileIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (gu *GameUpdate) AddImageIDs(ids ...int) *GameUpdate {
	gu.mutation.AddImageIDs(ids...)
	return gu
}

// AddImages adds the "images" edges to the Image entity.
func (gu *GameUpdate) AddImages(i ...*Image) *GameUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return gu.AddImageIDs(ids...)
}

// Mutation returns the GameMutation object of the builder.
func (gu *GameUpdate) Mutation() *GameMutation {
	return gu.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (gu *GameUpdate) ClearFiles() *GameUpdate {
	gu.mutation.ClearFiles()
	return gu
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (gu *GameUpdate) RemoveFileIDs(ids ...int) *GameUpdate {
	gu.mutation.RemoveFileIDs(ids...)
	return gu
}

// RemoveFiles removes "files" edges to File entities.
func (gu *GameUpdate) RemoveFiles(f ...*File) *GameUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return gu.RemoveFileIDs(ids...)
}

// ClearImages clears all "images" edges to the Image entity.
func (gu *GameUpdate) ClearImages() *GameUpdate {
	gu.mutation.ClearImages()
	return gu
}

// RemoveImageIDs removes the "images" edge to Image entities by IDs.
func (gu *GameUpdate) RemoveImageIDs(ids ...int) *GameUpdate {
	gu.mutation.RemoveImageIDs(ids...)
	return gu
}

// RemoveImages removes "images" edges to Image entities.
func (gu *GameUpdate) RemoveImages(i ...*Image) *GameUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return gu.RemoveImageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GameUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GameUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GameUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GameUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gu *GameUpdate) check() error {
	if v, ok := gu.mutation.Platform(); ok {
		if err := game.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "Game.platform": %w`, err)}
		}
	}
	return nil
}

func (gu *GameUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(game.Table, game.Columns, sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Slug(); ok {
		_spec.SetField(game.FieldSlug, field.TypeString, value)
	}
	if value, ok := gu.mutation.Platform(); ok {
		_spec.SetField(game.FieldPlatform, field.TypeEnum, value)
	}
	if value, ok := gu.mutation.Title(); ok {
		_spec.SetField(game.FieldTitle, field.TypeString, value)
	}
	if value, ok := gu.mutation.Year(); ok {
		_spec.SetField(game.FieldYear, field.TypeInt, value)
	}
	if value, ok := gu.mutation.AddedYear(); ok {
		_spec.AddField(game.FieldYear, field.TypeInt, value)
	}
	if gu.mutation.YearCleared() {
		_spec.ClearField(game.FieldYear, field.TypeInt)
	}
	if value, ok := gu.mutation.Publisher(); ok {
		_spec.SetField(game.FieldPublisher, field.TypeString, value)
	}
	if gu.mutation.PublisherCleared() {
		_spec.ClearField(game.FieldPublisher, field.TypeString)
	}
	if value, ok := gu.mutation.Developer(); ok {
		_spec.SetField(game.FieldDeveloper, field.TypeString, value)
	}
	if gu.mutation.DeveloperCleared() {
		_spec.ClearField(game.FieldDeveloper, field.TypeString)
	}
	if gu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.FilesTable,
			Columns: []string{game.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedFilesIDs(); len(nodes) > 0 && !gu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.FilesTable,
			Columns: []string{game.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.FilesTable,
			Columns: []string{game.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.ImagesTable,
			Columns: []string{game.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedImagesIDs(); len(nodes) > 0 && !gu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.ImagesTable,
			Columns: []string{game.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.ImagesTable,
			Columns: []string{game.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{game.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GameUpdateOne is the builder for updating a single Game entity.
type GameUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GameMutation
}

// SetSlug sets the "slug" field.
func (guo *GameUpdateOne) SetSlug(s string) *GameUpdateOne {
	guo.mutation.SetSlug(s)
	return guo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (guo *GameUpdateOne) SetNillableSlug(s *string) *GameUpdateOne {
	if s != nil {
		guo.SetSlug(*s)
	}
	return guo
}

// SetPlatform sets the "platform" field.
func (guo *GameUpdateOne) SetPlatform(ga game.Platform) *GameUpdateOne {
	guo.mutation.SetPlatform(ga)
	return guo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (guo *GameUpdateOne) SetNillablePlatform(ga *game.Platform) *GameUpdateOne {
	if ga != nil {
		guo.SetPlatform(*ga)
	}
	return guo
}

// SetTitle sets the "title" field.
func (guo *GameUpdateOne) SetTitle(s string) *GameUpdateOne {
	guo.mutation.SetTitle(s)
	return guo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (guo *GameUpdateOne) SetNillableTitle(s *string) *GameUpdateOne {
	if s != nil {
		guo.SetTitle(*s)
	}
	return guo
}

// SetYear sets the "year" field.
func (guo *GameUpdateOne) SetYear(i int) *GameUpdateOne {
	guo.mutation.ResetYear()
	guo.mutation.SetYear(i)
	return guo
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (guo *GameUpdateOne) SetNillableYear(i *int) *GameUpdateOne {
	if i != nil {
		guo.SetYear(*i)
	}
	return guo
}

// AddYear adds i to the "year" field.
func (guo *GameUpdateOne) AddYear(i int) *GameUpdateOne {
	guo.mutation.AddYear(i)
	return guo
}

// ClearYear clears the value of the "year" field.
func (guo *GameUpdateOne) ClearYear() *GameUpdateOne {
	guo.mutation.ClearYear()
	return guo
}

// SetPublisher sets the "publisher" field.
func (guo *GameUpdateOne) SetPublisher(s string) *GameUpdateOne {
	guo.mutation.SetPublisher(s)
	return guo
}

// SetNillablePublisher sets the "publisher" field if the given value is not nil.
func (guo *GameUpdateOne) SetNillablePublisher(s *string) *GameUpdateOne {
	if s != nil {
		guo.SetPublisher(*s)
	}
	return guo
}

// ClearPublisher clears the value of the "publisher" field.
func (guo *GameUpdateOne) ClearPublisher() *GameUpdateOne {
	guo.mutation.ClearPublisher()
	return guo
}

// SetDeveloper sets the "developer" field.
func (guo *GameUpdateOne) SetDeveloper(s string) *GameUpdateOne {
	guo.mutation.SetDeveloper(s)
	return guo
}

// SetNillableDeveloper sets the "developer" field if the given value is not nil.
func (guo *GameUpdateOne) SetNillableDeveloper(s *string) *GameUpdateOne {
	if s != nil {
		guo.SetDeveloper(*s)
	}
	return guo
}

// ClearDeveloper clears the value of the "developer" field.
func (guo *GameUpdateOne) ClearDeveloper() *GameUpdateOne {
	guo.mutation.ClearDeveloper()
	return guo
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (guo *GameUpdateOne) AddFileIDs(ids ...int) *GameUpdateOne {
	guo.mutation.AddFileIDs(ids...)
	return guo
}

// AddFiles adds the "files" edges to the File entity.
func (guo *GameUpdateOne) AddFiles(f ...*File) *GameUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return guo.AddFileIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (guo *GameUpdateOne) AddImageIDs(ids ...int) *GameUpdateOne {
	guo.mutation.AddImageIDs(ids...)
	return guo
}

// AddImages adds the "images" edges to the Image entity.
func (guo *GameUpdateOne) AddImages(i ...*Image) *GameUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return guo.AddImageIDs(ids...)
}

// Mutation returns the GameMutation object of the builder.
func (guo *GameUpdateOne) Mutation() *GameMutation {
	return guo.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (guo *GameUpdateOne) ClearFiles() *GameUpdateOne {
	guo.mutation.ClearFiles()
	return guo
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (guo *GameUpdateOne) RemoveFileIDs(ids ...int) *GameUpdateOne {
	guo.mutation.RemoveFileIDs(ids...)
	return guo
}

// RemoveFiles removes "files" edges to File entities.
func (guo *GameUpdateOne) RemoveFiles(f ...*File) *GameUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return guo.RemoveFileIDs(ids...)
}

// ClearImages clears all "images" edges to the Image entity.
func (guo *GameUpdateOne) ClearImages() *GameUpdateOne {
	guo.mutation.ClearImages()
	return guo
}

// RemoveImageIDs removes the "images" edge to Image entities by IDs.
func (guo *GameUpdateOne) RemoveImageIDs(ids ...int) *GameUpdateOne {
	guo.mutation.RemoveImageIDs(ids...)
	return guo
}

// RemoveImages removes "images" edges to Image entities.
func (guo *GameUpdateOne) RemoveImages(i ...*Image) *GameUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return guo.RemoveImageIDs(ids...)
}

// Where appends a list predicates to the GameUpdate builder.
func (guo *GameUpdateOne) Where(ps ...predicate.Game) *GameUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GameUpdateOne) Select(field string, fields ...string) *GameUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Game entity.
func (guo *GameUpdateOne) Save(ctx context.Context) (*Game, error) {
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GameUpdateOne) SaveX(ctx context.Context) *Game {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GameUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GameUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guo *GameUpdateOne) check() error {
	if v, ok := guo.mutation.Platform(); ok {
		if err := game.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "Game.platform": %w`, err)}
		}
	}
	return nil
}

func (guo *GameUpdateOne) sqlSave(ctx context.Context) (_node *Game, err error) {
	if err := guo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(game.Table, game.Columns, sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Game.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, game.FieldID)
		for _, f := range fields {
			if !game.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != game.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Slug(); ok {
		_spec.SetField(game.FieldSlug, field.TypeString, value)
	}
	if value, ok := guo.mutation.Platform(); ok {
		_spec.SetField(game.FieldPlatform, field.TypeEnum, value)
	}
	if value, ok := guo.mutation.Title(); ok {
		_spec.SetField(game.FieldTitle, field.TypeString, value)
	}
	if value, ok := guo.mutation.Year(); ok {
		_spec.SetField(game.FieldYear, field.TypeInt, value)
	}
	if value, ok := guo.mutation.AddedYear(); ok {
		_spec.AddField(game.FieldYear, field.TypeInt, value)
	}
	if guo.mutation.YearCleared() {
		_spec.ClearField(game.FieldYear, field.TypeInt)
	}
	if value, ok := guo.mutation.Publisher(); ok {
		_spec.SetField(game.FieldPublisher, field.TypeString, value)
	}
	if guo.mutation.PublisherCleared() {
		_spec.ClearField(game.FieldPublisher, field.TypeString)
	}
	if value, ok := guo.mutation.Developer(); ok {
		_spec.SetField(game.FieldDeveloper, field.TypeString, value)
	}
	if guo.mutation.DeveloperCleared() {
		_spec.ClearField(game.FieldDeveloper, field.TypeString)
	}
	if guo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.FilesTable,
			Columns: []string{game.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedFilesIDs(); len(nodes) > 0 && !guo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.FilesTable,
			Columns: []string{game.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.FilesTable,
			Columns: []string{game.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.ImagesTable,
			Columns: []string{game.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedImagesIDs(); len(nodes) > 0 && !guo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.ImagesTable,
			Columns: []string{game.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.ImagesTable,
			Columns: []string{game.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Game{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{game.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
