// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/deicod/archivedgames/ent/file"
	"github.com/deicod/archivedgames/ent/game"
	"github.com/deicod/archivedgames/ent/image"
	"github.com/deicod/archivedgames/ent/sitesetting"
	"github.com/deicod/archivedgames/ent/usershadow"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (f *FileQuery) CollectFields(ctx context.Context, satisfies ...string) (*FileQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return f, nil
	}
	if err := f.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return f, nil
}

func (f *FileQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(file.Columns))
		selectedFields = []string{file.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "game":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&GameClient{config: f.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, gameImplementors)...); err != nil {
				return err
			}
			f.withGame = query
		case "xid":
			if _, ok := fieldSeen[file.FieldXid]; !ok {
				selectedFields = append(selectedFields, file.FieldXid)
				fieldSeen[file.FieldXid] = struct{}{}
			}
		case "path":
			if _, ok := fieldSeen[file.FieldPath]; !ok {
				selectedFields = append(selectedFields, file.FieldPath)
				fieldSeen[file.FieldPath] = struct{}{}
			}
		case "originalName":
			if _, ok := fieldSeen[file.FieldOriginalName]; !ok {
				selectedFields = append(selectedFields, file.FieldOriginalName)
				fieldSeen[file.FieldOriginalName] = struct{}{}
			}
		case "normalizedName":
			if _, ok := fieldSeen[file.FieldNormalizedName]; !ok {
				selectedFields = append(selectedFields, file.FieldNormalizedName)
				fieldSeen[file.FieldNormalizedName] = struct{}{}
			}
		case "checksum":
			if _, ok := fieldSeen[file.FieldChecksum]; !ok {
				selectedFields = append(selectedFields, file.FieldChecksum)
				fieldSeen[file.FieldChecksum] = struct{}{}
			}
		case "sizeBytes":
			if _, ok := fieldSeen[file.FieldSizeBytes]; !ok {
				selectedFields = append(selectedFields, file.FieldSizeBytes)
				fieldSeen[file.FieldSizeBytes] = struct{}{}
			}
		case "mimeType":
			if _, ok := fieldSeen[file.FieldMimeType]; !ok {
				selectedFields = append(selectedFields, file.FieldMimeType)
				fieldSeen[file.FieldMimeType] = struct{}{}
			}
		case "format":
			if _, ok := fieldSeen[file.FieldFormat]; !ok {
				selectedFields = append(selectedFields, file.FieldFormat)
				fieldSeen[file.FieldFormat] = struct{}{}
			}
		case "source":
			if _, ok := fieldSeen[file.FieldSource]; !ok {
				selectedFields = append(selectedFields, file.FieldSource)
				fieldSeen[file.FieldSource] = struct{}{}
			}
		case "quarantine":
			if _, ok := fieldSeen[file.FieldQuarantine]; !ok {
				selectedFields = append(selectedFields, file.FieldQuarantine)
				fieldSeen[file.FieldQuarantine] = struct{}{}
			}
		case "needsReview":
			if _, ok := fieldSeen[file.FieldNeedsReview]; !ok {
				selectedFields = append(selectedFields, file.FieldNeedsReview)
				fieldSeen[file.FieldNeedsReview] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		f.Select(selectedFields...)
	}
	return nil
}

type filePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []FilePaginateOption
}

func newFilePaginateArgs(rv map[string]any) *filePaginateArgs {
	args := &filePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ga *GameQuery) CollectFields(ctx context.Context, satisfies ...string) (*GameQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ga, nil
	}
	if err := ga.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ga, nil
}

func (ga *GameQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(game.Columns))
		selectedFields = []string{game.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "files":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&FileClient{config: ga.config}).Query()
			)
			args := newFilePaginateArgs(fieldArgs(ctx, nil, path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newFilePager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					ga.loadTotal = append(ga.loadTotal, func(ctx context.Context, nodes []*Game) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID int `sql:"game_files"`
							Count  int `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(game.FilesColumn), ids...))
						})
						if err := query.GroupBy(game.FilesColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[int]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				} else {
					ga.loadTotal = append(ga.loadTotal, func(_ context.Context, nodes []*Game) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Files)
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, fileImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(game.FilesColumn, limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			ga.WithNamedFiles(alias, func(wq *FileQuery) {
				*wq = *query
			})

		case "images":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ImageClient{config: ga.config}).Query()
			)
			args := newImagePaginateArgs(fieldArgs(ctx, nil, path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newImagePager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					ga.loadTotal = append(ga.loadTotal, func(ctx context.Context, nodes []*Game) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID int `sql:"game_images"`
							Count  int `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(game.ImagesColumn), ids...))
						})
						if err := query.GroupBy(game.ImagesColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[int]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				} else {
					ga.loadTotal = append(ga.loadTotal, func(_ context.Context, nodes []*Game) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Images)
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, imageImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(game.ImagesColumn, limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			ga.WithNamedImages(alias, func(wq *ImageQuery) {
				*wq = *query
			})
		case "xid":
			if _, ok := fieldSeen[game.FieldXid]; !ok {
				selectedFields = append(selectedFields, game.FieldXid)
				fieldSeen[game.FieldXid] = struct{}{}
			}
		case "slug":
			if _, ok := fieldSeen[game.FieldSlug]; !ok {
				selectedFields = append(selectedFields, game.FieldSlug)
				fieldSeen[game.FieldSlug] = struct{}{}
			}
		case "platform":
			if _, ok := fieldSeen[game.FieldPlatform]; !ok {
				selectedFields = append(selectedFields, game.FieldPlatform)
				fieldSeen[game.FieldPlatform] = struct{}{}
			}
		case "title":
			if _, ok := fieldSeen[game.FieldTitle]; !ok {
				selectedFields = append(selectedFields, game.FieldTitle)
				fieldSeen[game.FieldTitle] = struct{}{}
			}
		case "year":
			if _, ok := fieldSeen[game.FieldYear]; !ok {
				selectedFields = append(selectedFields, game.FieldYear)
				fieldSeen[game.FieldYear] = struct{}{}
			}
		case "publisher":
			if _, ok := fieldSeen[game.FieldPublisher]; !ok {
				selectedFields = append(selectedFields, game.FieldPublisher)
				fieldSeen[game.FieldPublisher] = struct{}{}
			}
		case "developer":
			if _, ok := fieldSeen[game.FieldDeveloper]; !ok {
				selectedFields = append(selectedFields, game.FieldDeveloper)
				fieldSeen[game.FieldDeveloper] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ga.Select(selectedFields...)
	}
	return nil
}

type gamePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []GamePaginateOption
}

func newGamePaginateArgs(rv map[string]any) *gamePaginateArgs {
	args := &gamePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (i *ImageQuery) CollectFields(ctx context.Context, satisfies ...string) (*ImageQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return i, nil
	}
	if err := i.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return i, nil
}

func (i *ImageQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(image.Columns))
		selectedFields = []string{image.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "game":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&GameClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, gameImplementors)...); err != nil {
				return err
			}
			i.withGame = query
		case "xid":
			if _, ok := fieldSeen[image.FieldXid]; !ok {
				selectedFields = append(selectedFields, image.FieldXid)
				fieldSeen[image.FieldXid] = struct{}{}
			}
		case "kind":
			if _, ok := fieldSeen[image.FieldKind]; !ok {
				selectedFields = append(selectedFields, image.FieldKind)
				fieldSeen[image.FieldKind] = struct{}{}
			}
		case "position":
			if _, ok := fieldSeen[image.FieldPosition]; !ok {
				selectedFields = append(selectedFields, image.FieldPosition)
				fieldSeen[image.FieldPosition] = struct{}{}
			}
		case "s3Key":
			if _, ok := fieldSeen[image.FieldS3Key]; !ok {
				selectedFields = append(selectedFields, image.FieldS3Key)
				fieldSeen[image.FieldS3Key] = struct{}{}
			}
		case "width":
			if _, ok := fieldSeen[image.FieldWidth]; !ok {
				selectedFields = append(selectedFields, image.FieldWidth)
				fieldSeen[image.FieldWidth] = struct{}{}
			}
		case "height":
			if _, ok := fieldSeen[image.FieldHeight]; !ok {
				selectedFields = append(selectedFields, image.FieldHeight)
				fieldSeen[image.FieldHeight] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		i.Select(selectedFields...)
	}
	return nil
}

type imagePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ImagePaginateOption
}

func newImagePaginateArgs(rv map[string]any) *imagePaginateArgs {
	args := &imagePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ss *SiteSettingQuery) CollectFields(ctx context.Context, satisfies ...string) (*SiteSettingQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ss, nil
	}
	if err := ss.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ss, nil
}

func (ss *SiteSettingQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(sitesetting.Columns))
		selectedFields = []string{sitesetting.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "key":
			if _, ok := fieldSeen[sitesetting.FieldKey]; !ok {
				selectedFields = append(selectedFields, sitesetting.FieldKey)
				fieldSeen[sitesetting.FieldKey] = struct{}{}
			}
		case "value":
			if _, ok := fieldSeen[sitesetting.FieldValue]; !ok {
				selectedFields = append(selectedFields, sitesetting.FieldValue)
				fieldSeen[sitesetting.FieldValue] = struct{}{}
			}
		case "public":
			if _, ok := fieldSeen[sitesetting.FieldPublic]; !ok {
				selectedFields = append(selectedFields, sitesetting.FieldPublic)
				fieldSeen[sitesetting.FieldPublic] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ss.Select(selectedFields...)
	}
	return nil
}

type sitesettingPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []SiteSettingPaginateOption
}

func newSiteSettingPaginateArgs(rv map[string]any) *sitesettingPaginateArgs {
	args := &sitesettingPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (us *UserShadowQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserShadowQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return us, nil
	}
	if err := us.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return us, nil
}

func (us *UserShadowQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(usershadow.Columns))
		selectedFields = []string{usershadow.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "xid":
			if _, ok := fieldSeen[usershadow.FieldXid]; !ok {
				selectedFields = append(selectedFields, usershadow.FieldXid)
				fieldSeen[usershadow.FieldXid] = struct{}{}
			}
		case "keycloakSub":
			if _, ok := fieldSeen[usershadow.FieldKeycloakSub]; !ok {
				selectedFields = append(selectedFields, usershadow.FieldKeycloakSub)
				fieldSeen[usershadow.FieldKeycloakSub] = struct{}{}
			}
		case "handle":
			if _, ok := fieldSeen[usershadow.FieldHandle]; !ok {
				selectedFields = append(selectedFields, usershadow.FieldHandle)
				fieldSeen[usershadow.FieldHandle] = struct{}{}
			}
		case "displayName":
			if _, ok := fieldSeen[usershadow.FieldDisplayName]; !ok {
				selectedFields = append(selectedFields, usershadow.FieldDisplayName)
				fieldSeen[usershadow.FieldDisplayName] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		us.Select(selectedFields...)
	}
	return nil
}

type usershadowPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserShadowPaginateOption
}

func newUserShadowPaginateArgs(rv map[string]any) *usershadowPaginateArgs {
	args := &usershadowPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

// mayAddCondition appends another type condition to the satisfies list
// if it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond []string) []string {
Cond:
	for _, c := range typeCond {
		for _, s := range satisfies {
			if c == s {
				continue Cond
			}
		}
		satisfies = append(satisfies, c)
	}
	return satisfies
}
