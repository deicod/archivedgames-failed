// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (_m *File) Game(ctx context.Context) (*Game, error) {
	result, err := _m.Edges.GameOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryGame().Only(ctx)
	}
	return result, err
}

func (_m *Game) Files(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, where *FileWhereInput,
) (*FileConnection, error) {
	opts := []FilePaginateOption{
		WithFileFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := _m.Edges.totalCount[0][alias]
	if nodes, err := _m.NamedFiles(alias); err == nil || hasTotalCount {
		pager, err := newFilePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &FileConnection{Edges: []*FileEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return _m.QueryFiles().Paginate(ctx, after, first, before, last, opts...)
}

func (_m *Game) Images(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, where *ImageWhereInput,
) (*ImageConnection, error) {
	opts := []ImagePaginateOption{
		WithImageFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := _m.Edges.totalCount[1][alias]
	if nodes, err := _m.NamedImages(alias); err == nil || hasTotalCount {
		pager, err := newImagePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ImageConnection{Edges: []*ImageEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return _m.QueryImages().Paginate(ctx, after, first, before, last, opts...)
}

func (_m *Image) Game(ctx context.Context) (*Game, error) {
	result, err := _m.Edges.GameOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryGame().Only(ctx)
	}
	return result, err
}
