// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/deicod/archivedgames/ent/game"
	"github.com/deicod/archivedgames/ent/image"
)

// Image is the model entity for the Image schema.
type Image struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind image.Kind `json:"kind,omitempty"`
	// Position holds the value of the "position" field.
	Position int `json:"position,omitempty"`
	// S3Key holds the value of the "s3_key" field.
	S3Key string `json:"s3_key,omitempty"`
	// Width holds the value of the "width" field.
	Width int `json:"width,omitempty"`
	// Height holds the value of the "height" field.
	Height int `json:"height,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ImageQuery when eager-loading is set.
	Edges        ImageEdges `json:"edges"`
	game_images  *string
	selectValues sql.SelectValues
}

// ImageEdges holds the relations/edges for other nodes in the graph.
type ImageEdges struct {
	// Game holds the value of the game edge.
	Game *Game `json:"game,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// GameOrErr returns the Game value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImageEdges) GameOrErr() (*Game, error) {
	if e.Game != nil {
		return e.Game, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: game.Label}
	}
	return nil, &NotLoadedError{edge: "game"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Image) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case image.FieldPosition, image.FieldWidth, image.FieldHeight:
			values[i] = new(sql.NullInt64)
		case image.FieldID, image.FieldKind, image.FieldS3Key:
			values[i] = new(sql.NullString)
		case image.ForeignKeys[0]: // game_images
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Image fields.
func (_m *Image) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case image.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case image.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				_m.Kind = image.Kind(value.String)
			}
		case image.FieldPosition:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				_m.Position = int(value.Int64)
			}
		case image.FieldS3Key:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field s3_key", values[i])
			} else if value.Valid {
				_m.S3Key = value.String
			}
		case image.FieldWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[i])
			} else if value.Valid {
				_m.Width = int(value.Int64)
			}
		case image.FieldHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				_m.Height = int(value.Int64)
			}
		case image.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field game_images", values[i])
			} else if value.Valid {
				_m.game_images = new(string)
				*_m.game_images = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Image.
// This includes values selected through modifiers, order, etc.
func (_m *Image) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryGame queries the "game" edge of the Image entity.
func (_m *Image) QueryGame() *GameQuery {
	return NewImageClient(_m.config).QueryGame(_m)
}

// Update returns a builder for updating this Image.
// Note that you need to call Image.Unwrap() before calling this method if this Image
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Image) Update() *ImageUpdateOne {
	return NewImageClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Image entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Image) Unwrap() *Image {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Image is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Image) String() string {
	var builder strings.Builder
	builder.WriteString("Image(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", _m.Kind))
	builder.WriteString(", ")
	builder.WriteString("position=")
	builder.WriteString(fmt.Sprintf("%v", _m.Position))
	builder.WriteString(", ")
	builder.WriteString("s3_key=")
	builder.WriteString(_m.S3Key)
	builder.WriteString(", ")
	builder.WriteString("width=")
	builder.WriteString(fmt.Sprintf("%v", _m.Width))
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", _m.Height))
	builder.WriteByte(')')
	return builder.String()
}

// Images is a parsable slice of Image.
type Images []*Image
