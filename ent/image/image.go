// Code generated by ent, DO NOT EDIT.

package image

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the image type in the database.
	Label = "image"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldXid holds the string denoting the xid field in the database.
	FieldXid = "xid"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldS3Key holds the string denoting the s3_key field in the database.
	FieldS3Key = "s3_key"
	// FieldWidth holds the string denoting the width field in the database.
	FieldWidth = "width"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// EdgeGame holds the string denoting the game edge name in mutations.
	EdgeGame = "game"
	// Table holds the table name of the image in the database.
	Table = "images"
	// GameTable is the table that holds the game relation/edge.
	GameTable = "images"
	// GameInverseTable is the table name for the Game entity.
	// It exists in this package in order to avoid circular dependency with the "game" package.
	GameInverseTable = "games"
	// GameColumn is the table column denoting the game relation/edge.
	GameColumn = "game_images"
)

// Columns holds all SQL columns for image fields.
var Columns = []string{
	FieldID,
	FieldXid,
	FieldKind,
	FieldPosition,
	FieldS3Key,
	FieldWidth,
	FieldHeight,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "images"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"game_images",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultXid holds the default value on creation for the "xid" field.
	DefaultXid func() string
	// DefaultPosition holds the default value on creation for the "position" field.
	DefaultPosition int
)

// Kind defines the type for the "kind" enum field.
type Kind string

// Kind values.
const (
	KindCOVER   Kind = "COVER"
	KindGALLERY Kind = "GALLERY"
)

func (k Kind) String() string {
	return string(k)
}

// KindValidator is a validator for the "kind" field enum values. It is called by the builders before save.
func KindValidator(k Kind) error {
	switch k {
	case KindCOVER, KindGALLERY:
		return nil
	default:
		return fmt.Errorf("image: invalid enum value for kind field: %q", k)
	}
}

// OrderOption defines the ordering options for the Image queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByXid orders the results by the xid field.
func ByXid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldXid, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByPosition orders the results by the position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByS3Key orders the results by the s3_key field.
func ByS3Key(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldS3Key, opts...).ToFunc()
}

// ByWidth orders the results by the width field.
func ByWidth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWidth, opts...).ToFunc()
}

// ByHeight orders the results by the height field.
func ByHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeight, opts...).ToFunc()
}

// ByGameField orders the results by game field.
func ByGameField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGameStep(), sql.OrderByField(field, opts...))
	}
}
func newGameStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GameInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GameTable, GameColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Kind) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Kind) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Kind(str)
	if err := KindValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Kind", str)
	}
	return nil
}
