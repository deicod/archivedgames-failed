// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/deicod/archivedgames/ent/game"
	"github.com/deicod/archivedgames/ent/image"
)

// ImageCreate is the builder for creating a Image entity.
type ImageCreate struct {
	config
	mutation *ImageMutation
	hooks    []Hook
}

// SetKind sets the "kind" field.
func (ic *ImageCreate) SetKind(i image.Kind) *ImageCreate {
	ic.mutation.SetKind(i)
	return ic
}

// SetPosition sets the "position" field.
func (ic *ImageCreate) SetPosition(i int) *ImageCreate {
	ic.mutation.SetPosition(i)
	return ic
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (ic *ImageCreate) SetNillablePosition(i *int) *ImageCreate {
	if i != nil {
		ic.SetPosition(*i)
	}
	return ic
}

// SetS3Key sets the "s3_key" field.
func (ic *ImageCreate) SetS3Key(s string) *ImageCreate {
	ic.mutation.SetS3Key(s)
	return ic
}

// SetWidth sets the "width" field.
func (ic *ImageCreate) SetWidth(i int) *ImageCreate {
	ic.mutation.SetWidth(i)
	return ic
}

// SetHeight sets the "height" field.
func (ic *ImageCreate) SetHeight(i int) *ImageCreate {
	ic.mutation.SetHeight(i)
	return ic
}

// SetID sets the "id" field.
func (ic *ImageCreate) SetID(s string) *ImageCreate {
	ic.mutation.SetID(s)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *ImageCreate) SetNillableID(s *string) *ImageCreate {
	if s != nil {
		ic.SetID(*s)
	}
	return ic
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (ic *ImageCreate) SetGameID(id string) *ImageCreate {
	ic.mutation.SetGameID(id)
	return ic
}

// SetGame sets the "game" edge to the Game entity.
func (ic *ImageCreate) SetGame(g *Game) *ImageCreate {
	return ic.SetGameID(g.ID)
}

// Mutation returns the ImageMutation object of the builder.
func (ic *ImageCreate) Mutation() *ImageMutation {
	return ic.mutation
}

// Save creates the Image in the database.
func (ic *ImageCreate) Save(ctx context.Context) (*Image, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *ImageCreate) SaveX(ctx context.Context) *Image {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *ImageCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *ImageCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *ImageCreate) defaults() {
	if _, ok := ic.mutation.Position(); !ok {
		v := image.DefaultPosition
		ic.mutation.SetPosition(v)
	}
	if _, ok := ic.mutation.ID(); !ok {
		v := image.DefaultID()
		ic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *ImageCreate) check() error {
	if _, ok := ic.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "Image.kind"`)}
	}
	if v, ok := ic.mutation.Kind(); ok {
		if err := image.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "Image.kind": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Position(); !ok {
		return &ValidationError{Name: "position", err: errors.New(`ent: missing required field "Image.position"`)}
	}
	if _, ok := ic.mutation.S3Key(); !ok {
		return &ValidationError{Name: "s3_key", err: errors.New(`ent: missing required field "Image.s3_key"`)}
	}
	if _, ok := ic.mutation.Width(); !ok {
		return &ValidationError{Name: "width", err: errors.New(`ent: missing required field "Image.width"`)}
	}
	if _, ok := ic.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New(`ent: missing required field "Image.height"`)}
	}
	if len(ic.mutation.GameIDs()) == 0 {
		return &ValidationError{Name: "game", err: errors.New(`ent: missing required edge "Image.game"`)}
	}
	return nil
}

func (ic *ImageCreate) sqlSave(ctx context.Context) (*Image, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Image.ID type: %T", _spec.ID.Value)
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *ImageCreate) createSpec() (*Image, *sqlgraph.CreateSpec) {
	var (
		_node = &Image{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(image.Table, sqlgraph.NewFieldSpec(image.FieldID, field.TypeString))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.Kind(); ok {
		_spec.SetField(image.FieldKind, field.TypeEnum, value)
		_node.Kind = value
	}
	if value, ok := ic.mutation.Position(); ok {
		_spec.SetField(image.FieldPosition, field.TypeInt, value)
		_node.Position = value
	}
	if value, ok := ic.mutation.S3Key(); ok {
		_spec.SetField(image.FieldS3Key, field.TypeString, value)
		_node.S3Key = value
	}
	if value, ok := ic.mutation.Width(); ok {
		_spec.SetField(image.FieldWidth, field.TypeInt, value)
		_node.Width = value
	}
	if value, ok := ic.mutation.Height(); ok {
		_spec.SetField(image.FieldHeight, field.TypeInt, value)
		_node.Height = value
	}
	if nodes := ic.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.GameTable,
			Columns: []string{image.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.game_images = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ImageCreateBulk is the builder for creating many Image entities in bulk.
type ImageCreateBulk struct {
	config
	err      error
	builders []*ImageCreate
}

// Save creates the Image entities in the database.
func (icb *ImageCreateBulk) Save(ctx context.Context) ([]*Image, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Image, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *ImageCreateBulk) SaveX(ctx context.Context) []*Image {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *ImageCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *ImageCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
