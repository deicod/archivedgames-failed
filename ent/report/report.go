// Code generated by ent, DO NOT EDIT.

package report

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the report type in the database.
	Label = "report"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSubjectType holds the string denoting the subject_type field in the database.
	FieldSubjectType = "subject_type"
	// FieldSubjectXid holds the string denoting the subject_xid field in the database.
	FieldSubjectXid = "subject_xid"
	// FieldReporterID holds the string denoting the reporter_id field in the database.
	FieldReporterID = "reporter_id"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// Table holds the table name of the report in the database.
	Table = "reports"
)

// Columns holds all SQL columns for report fields.
var Columns = []string{
	FieldID,
	FieldSubjectType,
	FieldSubjectXid,
	FieldReporterID,
	FieldReason,
	FieldNote,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Status defines the type for the "status" enum field.
type Status string

// StatusOPEN is the default value of the Status enum.
const DefaultStatus = StatusOPEN

// Status values.
const (
	StatusOPEN     Status = "OPEN"
	StatusTRIAGED  Status = "TRIAGED"
	StatusACTIONED Status = "ACTIONED"
	StatusREJECTED Status = "REJECTED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusOPEN, StatusTRIAGED, StatusACTIONED, StatusREJECTED:
		return nil
	default:
		return fmt.Errorf("report: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Report queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySubjectType orders the results by the subject_type field.
func BySubjectType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubjectType, opts...).ToFunc()
}

// BySubjectXid orders the results by the subject_xid field.
func BySubjectXid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubjectXid, opts...).ToFunc()
}

// ByReporterID orders the results by the reporter_id field.
func ByReporterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReporterID, opts...).ToFunc()
}

// ByReason orders the results by the reason field.
func ByReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReason, opts...).ToFunc()
}

// ByNote orders the results by the note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
