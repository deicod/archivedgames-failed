// Code generated by ent, DO NOT EDIT.

package report

import (
	"entgo.io/ent/dialect/sql"
	"github.com/deicod/archivedgames/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldID, id))
}

// SubjectType applies equality check predicate on the "subject_type" field. It's identical to SubjectTypeEQ.
func SubjectType(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldSubjectType, v))
}

// SubjectXid applies equality check predicate on the "subject_xid" field. It's identical to SubjectXidEQ.
func SubjectXid(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldSubjectXid, v))
}

// ReporterID applies equality check predicate on the "reporter_id" field. It's identical to ReporterIDEQ.
func ReporterID(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldReporterID, v))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldReason, v))
}

// Note applies equality check predicate on the "note" field. It's identical to NoteEQ.
func Note(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldNote, v))
}

// SubjectTypeEQ applies the EQ predicate on the "subject_type" field.
func SubjectTypeEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldSubjectType, v))
}

// SubjectTypeNEQ applies the NEQ predicate on the "subject_type" field.
func SubjectTypeNEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldSubjectType, v))
}

// SubjectTypeIn applies the In predicate on the "subject_type" field.
func SubjectTypeIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldSubjectType, vs...))
}

// SubjectTypeNotIn applies the NotIn predicate on the "subject_type" field.
func SubjectTypeNotIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldSubjectType, vs...))
}

// SubjectTypeGT applies the GT predicate on the "subject_type" field.
func SubjectTypeGT(v string) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldSubjectType, v))
}

// SubjectTypeGTE applies the GTE predicate on the "subject_type" field.
func SubjectTypeGTE(v string) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldSubjectType, v))
}

// SubjectTypeLT applies the LT predicate on the "subject_type" field.
func SubjectTypeLT(v string) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldSubjectType, v))
}

// SubjectTypeLTE applies the LTE predicate on the "subject_type" field.
func SubjectTypeLTE(v string) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldSubjectType, v))
}

// SubjectTypeContains applies the Contains predicate on the "subject_type" field.
func SubjectTypeContains(v string) predicate.Report {
	return predicate.Report(sql.FieldContains(FieldSubjectType, v))
}

// SubjectTypeHasPrefix applies the HasPrefix predicate on the "subject_type" field.
func SubjectTypeHasPrefix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasPrefix(FieldSubjectType, v))
}

// SubjectTypeHasSuffix applies the HasSuffix predicate on the "subject_type" field.
func SubjectTypeHasSuffix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasSuffix(FieldSubjectType, v))
}

// SubjectTypeEqualFold applies the EqualFold predicate on the "subject_type" field.
func SubjectTypeEqualFold(v string) predicate.Report {
	return predicate.Report(sql.FieldEqualFold(FieldSubjectType, v))
}

// SubjectTypeContainsFold applies the ContainsFold predicate on the "subject_type" field.
func SubjectTypeContainsFold(v string) predicate.Report {
	return predicate.Report(sql.FieldContainsFold(FieldSubjectType, v))
}

// SubjectXidEQ applies the EQ predicate on the "subject_xid" field.
func SubjectXidEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldSubjectXid, v))
}

// SubjectXidNEQ applies the NEQ predicate on the "subject_xid" field.
func SubjectXidNEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldSubjectXid, v))
}

// SubjectXidIn applies the In predicate on the "subject_xid" field.
func SubjectXidIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldSubjectXid, vs...))
}

// SubjectXidNotIn applies the NotIn predicate on the "subject_xid" field.
func SubjectXidNotIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldSubjectXid, vs...))
}

// SubjectXidGT applies the GT predicate on the "subject_xid" field.
func SubjectXidGT(v string) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldSubjectXid, v))
}

// SubjectXidGTE applies the GTE predicate on the "subject_xid" field.
func SubjectXidGTE(v string) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldSubjectXid, v))
}

// SubjectXidLT applies the LT predicate on the "subject_xid" field.
func SubjectXidLT(v string) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldSubjectXid, v))
}

// SubjectXidLTE applies the LTE predicate on the "subject_xid" field.
func SubjectXidLTE(v string) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldSubjectXid, v))
}

// SubjectXidContains applies the Contains predicate on the "subject_xid" field.
func SubjectXidContains(v string) predicate.Report {
	return predicate.Report(sql.FieldContains(FieldSubjectXid, v))
}

// SubjectXidHasPrefix applies the HasPrefix predicate on the "subject_xid" field.
func SubjectXidHasPrefix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasPrefix(FieldSubjectXid, v))
}

// SubjectXidHasSuffix applies the HasSuffix predicate on the "subject_xid" field.
func SubjectXidHasSuffix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasSuffix(FieldSubjectXid, v))
}

// SubjectXidEqualFold applies the EqualFold predicate on the "subject_xid" field.
func SubjectXidEqualFold(v string) predicate.Report {
	return predicate.Report(sql.FieldEqualFold(FieldSubjectXid, v))
}

// SubjectXidContainsFold applies the ContainsFold predicate on the "subject_xid" field.
func SubjectXidContainsFold(v string) predicate.Report {
	return predicate.Report(sql.FieldContainsFold(FieldSubjectXid, v))
}

// ReporterIDEQ applies the EQ predicate on the "reporter_id" field.
func ReporterIDEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldReporterID, v))
}

// ReporterIDNEQ applies the NEQ predicate on the "reporter_id" field.
func ReporterIDNEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldReporterID, v))
}

// ReporterIDIn applies the In predicate on the "reporter_id" field.
func ReporterIDIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldReporterID, vs...))
}

// ReporterIDNotIn applies the NotIn predicate on the "reporter_id" field.
func ReporterIDNotIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldReporterID, vs...))
}

// ReporterIDGT applies the GT predicate on the "reporter_id" field.
func ReporterIDGT(v string) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldReporterID, v))
}

// ReporterIDGTE applies the GTE predicate on the "reporter_id" field.
func ReporterIDGTE(v string) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldReporterID, v))
}

// ReporterIDLT applies the LT predicate on the "reporter_id" field.
func ReporterIDLT(v string) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldReporterID, v))
}

// ReporterIDLTE applies the LTE predicate on the "reporter_id" field.
func ReporterIDLTE(v string) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldReporterID, v))
}

// ReporterIDContains applies the Contains predicate on the "reporter_id" field.
func ReporterIDContains(v string) predicate.Report {
	return predicate.Report(sql.FieldContains(FieldReporterID, v))
}

// ReporterIDHasPrefix applies the HasPrefix predicate on the "reporter_id" field.
func ReporterIDHasPrefix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasPrefix(FieldReporterID, v))
}

// ReporterIDHasSuffix applies the HasSuffix predicate on the "reporter_id" field.
func ReporterIDHasSuffix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasSuffix(FieldReporterID, v))
}

// ReporterIDIsNil applies the IsNil predicate on the "reporter_id" field.
func ReporterIDIsNil() predicate.Report {
	return predicate.Report(sql.FieldIsNull(FieldReporterID))
}

// ReporterIDNotNil applies the NotNil predicate on the "reporter_id" field.
func ReporterIDNotNil() predicate.Report {
	return predicate.Report(sql.FieldNotNull(FieldReporterID))
}

// ReporterIDEqualFold applies the EqualFold predicate on the "reporter_id" field.
func ReporterIDEqualFold(v string) predicate.Report {
	return predicate.Report(sql.FieldEqualFold(FieldReporterID, v))
}

// ReporterIDContainsFold applies the ContainsFold predicate on the "reporter_id" field.
func ReporterIDContainsFold(v string) predicate.Report {
	return predicate.Report(sql.FieldContainsFold(FieldReporterID, v))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldReason, vs...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldReason, v))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldReason, v))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldReason, v))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldReason, v))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.Report {
	return predicate.Report(sql.FieldContains(FieldReason, v))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasPrefix(FieldReason, v))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasSuffix(FieldReason, v))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.Report {
	return predicate.Report(sql.FieldEqualFold(FieldReason, v))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.Report {
	return predicate.Report(sql.FieldContainsFold(FieldReason, v))
}

// NoteEQ applies the EQ predicate on the "note" field.
func NoteEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldNote, v))
}

// NoteNEQ applies the NEQ predicate on the "note" field.
func NoteNEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldNote, v))
}

// NoteIn applies the In predicate on the "note" field.
func NoteIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldNote, vs...))
}

// NoteNotIn applies the NotIn predicate on the "note" field.
func NoteNotIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldNote, vs...))
}

// NoteGT applies the GT predicate on the "note" field.
func NoteGT(v string) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldNote, v))
}

// NoteGTE applies the GTE predicate on the "note" field.
func NoteGTE(v string) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldNote, v))
}

// NoteLT applies the LT predicate on the "note" field.
func NoteLT(v string) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldNote, v))
}

// NoteLTE applies the LTE predicate on the "note" field.
func NoteLTE(v string) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldNote, v))
}

// NoteContains applies the Contains predicate on the "note" field.
func NoteContains(v string) predicate.Report {
	return predicate.Report(sql.FieldContains(FieldNote, v))
}

// NoteHasPrefix applies the HasPrefix predicate on the "note" field.
func NoteHasPrefix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasPrefix(FieldNote, v))
}

// NoteHasSuffix applies the HasSuffix predicate on the "note" field.
func NoteHasSuffix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasSuffix(FieldNote, v))
}

// NoteIsNil applies the IsNil predicate on the "note" field.
func NoteIsNil() predicate.Report {
	return predicate.Report(sql.FieldIsNull(FieldNote))
}

// NoteNotNil applies the NotNil predicate on the "note" field.
func NoteNotNil() predicate.Report {
	return predicate.Report(sql.FieldNotNull(FieldNote))
}

// NoteEqualFold applies the EqualFold predicate on the "note" field.
func NoteEqualFold(v string) predicate.Report {
	return predicate.Report(sql.FieldEqualFold(FieldNote, v))
}

// NoteContainsFold applies the ContainsFold predicate on the "note" field.
func NoteContainsFold(v string) predicate.Report {
	return predicate.Report(sql.FieldContainsFold(FieldNote, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldStatus, vs...))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Report) predicate.Report {
	return predicate.Report(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Report) predicate.Report {
	return predicate.Report(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Report) predicate.Report {
	return predicate.Report(sql.NotPredicates(p))
}
