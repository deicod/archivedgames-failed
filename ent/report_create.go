// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/deicod/archivedgames/ent/report"
)

// ReportCreate is the builder for creating a Report entity.
type ReportCreate struct {
	config
	mutation *ReportMutation
	hooks    []Hook
}

// SetSubjectType sets the "subject_type" field.
func (_c *ReportCreate) SetSubjectType(v string) *ReportCreate {
	_c.mutation.SetSubjectType(v)
	return _c
}

// SetSubjectID sets the "subject_id" field.
func (_c *ReportCreate) SetSubjectID(v string) *ReportCreate {
	_c.mutation.SetSubjectID(v)
	return _c
}

// SetReporterID sets the "reporter_id" field.
func (_c *ReportCreate) SetReporterID(v string) *ReportCreate {
	_c.mutation.SetReporterID(v)
	return _c
}

// SetNillableReporterID sets the "reporter_id" field if the given value is not nil.
func (_c *ReportCreate) SetNillableReporterID(v *string) *ReportCreate {
	if v != nil {
		_c.SetReporterID(*v)
	}
	return _c
}

// SetReason sets the "reason" field.
func (_c *ReportCreate) SetReason(v string) *ReportCreate {
	_c.mutation.SetReason(v)
	return _c
}

// SetNote sets the "note" field.
func (_c *ReportCreate) SetNote(v string) *ReportCreate {
	_c.mutation.SetNote(v)
	return _c
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (_c *ReportCreate) SetNillableNote(v *string) *ReportCreate {
	if v != nil {
		_c.SetNote(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *ReportCreate) SetStatus(v report.Status) *ReportCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *ReportCreate) SetNillableStatus(v *report.Status) *ReportCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *ReportCreate) SetID(v string) *ReportCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *ReportCreate) SetNillableID(v *string) *ReportCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// Mutation returns the ReportMutation object of the builder.
func (_c *ReportCreate) Mutation() *ReportMutation {
	return _c.mutation
}

// Save creates the Report in the database.
func (_c *ReportCreate) Save(ctx context.Context) (*Report, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ReportCreate) SaveX(ctx context.Context) *Report {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ReportCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ReportCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ReportCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := report.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := report.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ReportCreate) check() error {
	if _, ok := _c.mutation.SubjectType(); !ok {
		return &ValidationError{Name: "subject_type", err: errors.New(`ent: missing required field "Report.subject_type"`)}
	}
	if _, ok := _c.mutation.SubjectID(); !ok {
		return &ValidationError{Name: "subject_id", err: errors.New(`ent: missing required field "Report.subject_id"`)}
	}
	if _, ok := _c.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New(`ent: missing required field "Report.reason"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Report.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := report.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Report.status": %w`, err)}
		}
	}
	return nil
}

func (_c *ReportCreate) sqlSave(ctx context.Context) (*Report, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Report.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ReportCreate) createSpec() (*Report, *sqlgraph.CreateSpec) {
	var (
		_node = &Report{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(report.Table, sqlgraph.NewFieldSpec(report.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.SubjectType(); ok {
		_spec.SetField(report.FieldSubjectType, field.TypeString, value)
		_node.SubjectType = value
	}
	if value, ok := _c.mutation.SubjectID(); ok {
		_spec.SetField(report.FieldSubjectID, field.TypeString, value)
		_node.SubjectID = value
	}
	if value, ok := _c.mutation.ReporterID(); ok {
		_spec.SetField(report.FieldReporterID, field.TypeString, value)
		_node.ReporterID = value
	}
	if value, ok := _c.mutation.Reason(); ok {
		_spec.SetField(report.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := _c.mutation.Note(); ok {
		_spec.SetField(report.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(report.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	return _node, _spec
}

// ReportCreateBulk is the builder for creating many Report entities in bulk.
type ReportCreateBulk struct {
	config
	err      error
	builders []*ReportCreate
}

// Save creates the Report entities in the database.
func (_c *ReportCreateBulk) Save(ctx context.Context) ([]*Report, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Report, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ReportCreateBulk) SaveX(ctx context.Context) []*Report {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ReportCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ReportCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
