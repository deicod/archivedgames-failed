// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/deicod/archivedgames/ent/predicate"
	"github.com/deicod/archivedgames/ent/sitesetting"
)

// SiteSettingUpdate is the builder for updating SiteSetting entities.
type SiteSettingUpdate struct {
	config
	hooks    []Hook
	mutation *SiteSettingMutation
}

// Where appends a list predicates to the SiteSettingUpdate builder.
func (_u *SiteSettingUpdate) Where(ps ...predicate.SiteSetting) *SiteSettingUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetKey sets the "key" field.
func (_u *SiteSettingUpdate) SetKey(v string) *SiteSettingUpdate {
	_u.mutation.SetKey(v)
	return _u
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_u *SiteSettingUpdate) SetNillableKey(v *string) *SiteSettingUpdate {
	if v != nil {
		_u.SetKey(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *SiteSettingUpdate) SetValue(v json.RawMessage) *SiteSettingUpdate {
	_u.mutation.SetValue(v)
	return _u
}

// AppendValue appends value to the "value" field.
func (_u *SiteSettingUpdate) AppendValue(v json.RawMessage) *SiteSettingUpdate {
	_u.mutation.AppendValue(v)
	return _u
}

// ClearValue clears the value of the "value" field.
func (_u *SiteSettingUpdate) ClearValue() *SiteSettingUpdate {
	_u.mutation.ClearValue()
	return _u
}

// SetPublic sets the "public" field.
func (_u *SiteSettingUpdate) SetPublic(v bool) *SiteSettingUpdate {
	_u.mutation.SetPublic(v)
	return _u
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (_u *SiteSettingUpdate) SetNillablePublic(v *bool) *SiteSettingUpdate {
	if v != nil {
		_u.SetPublic(*v)
	}
	return _u
}

// Mutation returns the SiteSettingMutation object of the builder.
func (_u *SiteSettingUpdate) Mutation() *SiteSettingMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SiteSettingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SiteSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SiteSettingUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SiteSettingUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *SiteSettingUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sitesetting.Table, sitesetting.Columns, sqlgraph.NewFieldSpec(sitesetting.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Key(); ok {
		_spec.SetField(sitesetting.FieldKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(sitesetting.FieldValue, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedValue(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, sitesetting.FieldValue, value)
		})
	}
	if _u.mutation.ValueCleared() {
		_spec.ClearField(sitesetting.FieldValue, field.TypeJSON)
	}
	if value, ok := _u.mutation.Public(); ok {
		_spec.SetField(sitesetting.FieldPublic, field.TypeBool, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sitesetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SiteSettingUpdateOne is the builder for updating a single SiteSetting entity.
type SiteSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SiteSettingMutation
}

// SetKey sets the "key" field.
func (_u *SiteSettingUpdateOne) SetKey(v string) *SiteSettingUpdateOne {
	_u.mutation.SetKey(v)
	return _u
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_u *SiteSettingUpdateOne) SetNillableKey(v *string) *SiteSettingUpdateOne {
	if v != nil {
		_u.SetKey(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *SiteSettingUpdateOne) SetValue(v json.RawMessage) *SiteSettingUpdateOne {
	_u.mutation.SetValue(v)
	return _u
}

// AppendValue appends value to the "value" field.
func (_u *SiteSettingUpdateOne) AppendValue(v json.RawMessage) *SiteSettingUpdateOne {
	_u.mutation.AppendValue(v)
	return _u
}

// ClearValue clears the value of the "value" field.
func (_u *SiteSettingUpdateOne) ClearValue() *SiteSettingUpdateOne {
	_u.mutation.ClearValue()
	return _u
}

// SetPublic sets the "public" field.
func (_u *SiteSettingUpdateOne) SetPublic(v bool) *SiteSettingUpdateOne {
	_u.mutation.SetPublic(v)
	return _u
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (_u *SiteSettingUpdateOne) SetNillablePublic(v *bool) *SiteSettingUpdateOne {
	if v != nil {
		_u.SetPublic(*v)
	}
	return _u
}

// Mutation returns the SiteSettingMutation object of the builder.
func (_u *SiteSettingUpdateOne) Mutation() *SiteSettingMutation {
	return _u.mutation
}

// Where appends a list predicates to the SiteSettingUpdate builder.
func (_u *SiteSettingUpdateOne) Where(ps ...predicate.SiteSetting) *SiteSettingUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SiteSettingUpdateOne) Select(field string, fields ...string) *SiteSettingUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated SiteSetting entity.
func (_u *SiteSettingUpdateOne) Save(ctx context.Context) (*SiteSetting, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SiteSettingUpdateOne) SaveX(ctx context.Context) *SiteSetting {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SiteSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SiteSettingUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *SiteSettingUpdateOne) sqlSave(ctx context.Context) (_node *SiteSetting, err error) {
	_spec := sqlgraph.NewUpdateSpec(sitesetting.Table, sitesetting.Columns, sqlgraph.NewFieldSpec(sitesetting.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SiteSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sitesetting.FieldID)
		for _, f := range fields {
			if !sitesetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sitesetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Key(); ok {
		_spec.SetField(sitesetting.FieldKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(sitesetting.FieldValue, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedValue(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, sitesetting.FieldValue, value)
		})
	}
	if _u.mutation.ValueCleared() {
		_spec.ClearField(sitesetting.FieldValue, field.TypeJSON)
	}
	if value, ok := _u.mutation.Public(); ok {
		_spec.SetField(sitesetting.FieldPublic, field.TypeBool, value)
	}
	_node = &SiteSetting{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sitesetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
