// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/deicod/archivedgames/ent/usershadow"
)

// UserShadow is the model entity for the UserShadow schema.
type UserShadow struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// KeycloakSub holds the value of the "keycloak_sub" field.
	KeycloakSub string `json:"keycloak_sub,omitempty"`
	// Handle holds the value of the "handle" field.
	Handle string `json:"handle,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName  string `json:"display_name,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserShadow) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usershadow.FieldID, usershadow.FieldKeycloakSub, usershadow.FieldHandle, usershadow.FieldDisplayName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserShadow fields.
func (us *UserShadow) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usershadow.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				us.ID = value.String
			}
		case usershadow.FieldKeycloakSub:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field keycloak_sub", values[i])
			} else if value.Valid {
				us.KeycloakSub = value.String
			}
		case usershadow.FieldHandle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field handle", values[i])
			} else if value.Valid {
				us.Handle = value.String
			}
		case usershadow.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				us.DisplayName = value.String
			}
		default:
			us.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserShadow.
// This includes values selected through modifiers, order, etc.
func (us *UserShadow) Value(name string) (ent.Value, error) {
	return us.selectValues.Get(name)
}

// Update returns a builder for updating this UserShadow.
// Note that you need to call UserShadow.Unwrap() before calling this method if this UserShadow
// was returned from a transaction, and the transaction was committed or rolled back.
func (us *UserShadow) Update() *UserShadowUpdateOne {
	return NewUserShadowClient(us.config).UpdateOne(us)
}

// Unwrap unwraps the UserShadow entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (us *UserShadow) Unwrap() *UserShadow {
	_tx, ok := us.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserShadow is not a transactional entity")
	}
	us.config.driver = _tx.drv
	return us
}

// String implements the fmt.Stringer.
func (us *UserShadow) String() string {
	var builder strings.Builder
	builder.WriteString("UserShadow(")
	builder.WriteString(fmt.Sprintf("id=%v, ", us.ID))
	builder.WriteString("keycloak_sub=")
	builder.WriteString(us.KeycloakSub)
	builder.WriteString(", ")
	builder.WriteString("handle=")
	builder.WriteString(us.Handle)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(us.DisplayName)
	builder.WriteByte(')')
	return builder.String()
}

// UserShadows is a parsable slice of UserShadow.
type UserShadows []*UserShadow
