// Code generated by ent, DO NOT EDIT.

package usershadow

import (
	"entgo.io/ent/dialect/sql"
	"github.com/deicod/archivedgames/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldLTE(FieldID, id))
}

// Xid applies equality check predicate on the "xid" field. It's identical to XidEQ.
func Xid(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldEQ(FieldXid, v))
}

// KeycloakSub applies equality check predicate on the "keycloak_sub" field. It's identical to KeycloakSubEQ.
func KeycloakSub(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldEQ(FieldKeycloakSub, v))
}

// Handle applies equality check predicate on the "handle" field. It's identical to HandleEQ.
func Handle(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldEQ(FieldHandle, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldEQ(FieldDisplayName, v))
}

// XidEQ applies the EQ predicate on the "xid" field.
func XidEQ(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldEQ(FieldXid, v))
}

// XidNEQ applies the NEQ predicate on the "xid" field.
func XidNEQ(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldNEQ(FieldXid, v))
}

// XidIn applies the In predicate on the "xid" field.
func XidIn(vs ...string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldIn(FieldXid, vs...))
}

// XidNotIn applies the NotIn predicate on the "xid" field.
func XidNotIn(vs ...string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldNotIn(FieldXid, vs...))
}

// XidGT applies the GT predicate on the "xid" field.
func XidGT(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldGT(FieldXid, v))
}

// XidGTE applies the GTE predicate on the "xid" field.
func XidGTE(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldGTE(FieldXid, v))
}

// XidLT applies the LT predicate on the "xid" field.
func XidLT(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldLT(FieldXid, v))
}

// XidLTE applies the LTE predicate on the "xid" field.
func XidLTE(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldLTE(FieldXid, v))
}

// XidContains applies the Contains predicate on the "xid" field.
func XidContains(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldContains(FieldXid, v))
}

// XidHasPrefix applies the HasPrefix predicate on the "xid" field.
func XidHasPrefix(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldHasPrefix(FieldXid, v))
}

// XidHasSuffix applies the HasSuffix predicate on the "xid" field.
func XidHasSuffix(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldHasSuffix(FieldXid, v))
}

// XidEqualFold applies the EqualFold predicate on the "xid" field.
func XidEqualFold(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldEqualFold(FieldXid, v))
}

// XidContainsFold applies the ContainsFold predicate on the "xid" field.
func XidContainsFold(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldContainsFold(FieldXid, v))
}

// KeycloakSubEQ applies the EQ predicate on the "keycloak_sub" field.
func KeycloakSubEQ(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldEQ(FieldKeycloakSub, v))
}

// KeycloakSubNEQ applies the NEQ predicate on the "keycloak_sub" field.
func KeycloakSubNEQ(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldNEQ(FieldKeycloakSub, v))
}

// KeycloakSubIn applies the In predicate on the "keycloak_sub" field.
func KeycloakSubIn(vs ...string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldIn(FieldKeycloakSub, vs...))
}

// KeycloakSubNotIn applies the NotIn predicate on the "keycloak_sub" field.
func KeycloakSubNotIn(vs ...string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldNotIn(FieldKeycloakSub, vs...))
}

// KeycloakSubGT applies the GT predicate on the "keycloak_sub" field.
func KeycloakSubGT(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldGT(FieldKeycloakSub, v))
}

// KeycloakSubGTE applies the GTE predicate on the "keycloak_sub" field.
func KeycloakSubGTE(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldGTE(FieldKeycloakSub, v))
}

// KeycloakSubLT applies the LT predicate on the "keycloak_sub" field.
func KeycloakSubLT(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldLT(FieldKeycloakSub, v))
}

// KeycloakSubLTE applies the LTE predicate on the "keycloak_sub" field.
func KeycloakSubLTE(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldLTE(FieldKeycloakSub, v))
}

// KeycloakSubContains applies the Contains predicate on the "keycloak_sub" field.
func KeycloakSubContains(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldContains(FieldKeycloakSub, v))
}

// KeycloakSubHasPrefix applies the HasPrefix predicate on the "keycloak_sub" field.
func KeycloakSubHasPrefix(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldHasPrefix(FieldKeycloakSub, v))
}

// KeycloakSubHasSuffix applies the HasSuffix predicate on the "keycloak_sub" field.
func KeycloakSubHasSuffix(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldHasSuffix(FieldKeycloakSub, v))
}

// KeycloakSubEqualFold applies the EqualFold predicate on the "keycloak_sub" field.
func KeycloakSubEqualFold(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldEqualFold(FieldKeycloakSub, v))
}

// KeycloakSubContainsFold applies the ContainsFold predicate on the "keycloak_sub" field.
func KeycloakSubContainsFold(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldContainsFold(FieldKeycloakSub, v))
}

// HandleEQ applies the EQ predicate on the "handle" field.
func HandleEQ(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldEQ(FieldHandle, v))
}

// HandleNEQ applies the NEQ predicate on the "handle" field.
func HandleNEQ(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldNEQ(FieldHandle, v))
}

// HandleIn applies the In predicate on the "handle" field.
func HandleIn(vs ...string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldIn(FieldHandle, vs...))
}

// HandleNotIn applies the NotIn predicate on the "handle" field.
func HandleNotIn(vs ...string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldNotIn(FieldHandle, vs...))
}

// HandleGT applies the GT predicate on the "handle" field.
func HandleGT(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldGT(FieldHandle, v))
}

// HandleGTE applies the GTE predicate on the "handle" field.
func HandleGTE(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldGTE(FieldHandle, v))
}

// HandleLT applies the LT predicate on the "handle" field.
func HandleLT(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldLT(FieldHandle, v))
}

// HandleLTE applies the LTE predicate on the "handle" field.
func HandleLTE(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldLTE(FieldHandle, v))
}

// HandleContains applies the Contains predicate on the "handle" field.
func HandleContains(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldContains(FieldHandle, v))
}

// HandleHasPrefix applies the HasPrefix predicate on the "handle" field.
func HandleHasPrefix(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldHasPrefix(FieldHandle, v))
}

// HandleHasSuffix applies the HasSuffix predicate on the "handle" field.
func HandleHasSuffix(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldHasSuffix(FieldHandle, v))
}

// HandleIsNil applies the IsNil predicate on the "handle" field.
func HandleIsNil() predicate.UserShadow {
	return predicate.UserShadow(sql.FieldIsNull(FieldHandle))
}

// HandleNotNil applies the NotNil predicate on the "handle" field.
func HandleNotNil() predicate.UserShadow {
	return predicate.UserShadow(sql.FieldNotNull(FieldHandle))
}

// HandleEqualFold applies the EqualFold predicate on the "handle" field.
func HandleEqualFold(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldEqualFold(FieldHandle, v))
}

// HandleContainsFold applies the ContainsFold predicate on the "handle" field.
func HandleContainsFold(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldContainsFold(FieldHandle, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameIsNil applies the IsNil predicate on the "display_name" field.
func DisplayNameIsNil() predicate.UserShadow {
	return predicate.UserShadow(sql.FieldIsNull(FieldDisplayName))
}

// DisplayNameNotNil applies the NotNil predicate on the "display_name" field.
func DisplayNameNotNil() predicate.UserShadow {
	return predicate.UserShadow(sql.FieldNotNull(FieldDisplayName))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.UserShadow {
	return predicate.UserShadow(sql.FieldContainsFold(FieldDisplayName, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserShadow) predicate.UserShadow {
	return predicate.UserShadow(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserShadow) predicate.UserShadow {
	return predicate.UserShadow(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserShadow) predicate.UserShadow {
	return predicate.UserShadow(sql.NotPredicates(p))
}
