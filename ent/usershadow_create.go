// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/deicod/archivedgames/ent/usershadow"
)

// UserShadowCreate is the builder for creating a UserShadow entity.
type UserShadowCreate struct {
	config
	mutation *UserShadowMutation
	hooks    []Hook
}

// SetXid sets the "xid" field.
func (usc *UserShadowCreate) SetXid(s string) *UserShadowCreate {
	usc.mutation.SetXid(s)
	return usc
}

// SetNillableXid sets the "xid" field if the given value is not nil.
func (usc *UserShadowCreate) SetNillableXid(s *string) *UserShadowCreate {
	if s != nil {
		usc.SetXid(*s)
	}
	return usc
}

// SetKeycloakSub sets the "keycloak_sub" field.
func (usc *UserShadowCreate) SetKeycloakSub(s string) *UserShadowCreate {
	usc.mutation.SetKeycloakSub(s)
	return usc
}

// SetHandle sets the "handle" field.
func (usc *UserShadowCreate) SetHandle(s string) *UserShadowCreate {
	usc.mutation.SetHandle(s)
	return usc
}

// SetNillableHandle sets the "handle" field if the given value is not nil.
func (usc *UserShadowCreate) SetNillableHandle(s *string) *UserShadowCreate {
	if s != nil {
		usc.SetHandle(*s)
	}
	return usc
}

// SetDisplayName sets the "display_name" field.
func (usc *UserShadowCreate) SetDisplayName(s string) *UserShadowCreate {
	usc.mutation.SetDisplayName(s)
	return usc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (usc *UserShadowCreate) SetNillableDisplayName(s *string) *UserShadowCreate {
	if s != nil {
		usc.SetDisplayName(*s)
	}
	return usc
}

// Mutation returns the UserShadowMutation object of the builder.
func (usc *UserShadowCreate) Mutation() *UserShadowMutation {
	return usc.mutation
}

// Save creates the UserShadow in the database.
func (usc *UserShadowCreate) Save(ctx context.Context) (*UserShadow, error) {
	usc.defaults()
	return withHooks(ctx, usc.sqlSave, usc.mutation, usc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (usc *UserShadowCreate) SaveX(ctx context.Context) *UserShadow {
	v, err := usc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usc *UserShadowCreate) Exec(ctx context.Context) error {
	_, err := usc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usc *UserShadowCreate) ExecX(ctx context.Context) {
	if err := usc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usc *UserShadowCreate) defaults() {
	if _, ok := usc.mutation.Xid(); !ok {
		v := usershadow.DefaultXid()
		usc.mutation.SetXid(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usc *UserShadowCreate) check() error {
	if _, ok := usc.mutation.Xid(); !ok {
		return &ValidationError{Name: "xid", err: errors.New(`ent: missing required field "UserShadow.xid"`)}
	}
	if _, ok := usc.mutation.KeycloakSub(); !ok {
		return &ValidationError{Name: "keycloak_sub", err: errors.New(`ent: missing required field "UserShadow.keycloak_sub"`)}
	}
	return nil
}

func (usc *UserShadowCreate) sqlSave(ctx context.Context) (*UserShadow, error) {
	if err := usc.check(); err != nil {
		return nil, err
	}
	_node, _spec := usc.createSpec()
	if err := sqlgraph.CreateNode(ctx, usc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	usc.mutation.id = &_node.ID
	usc.mutation.done = true
	return _node, nil
}

func (usc *UserShadowCreate) createSpec() (*UserShadow, *sqlgraph.CreateSpec) {
	var (
		_node = &UserShadow{config: usc.config}
		_spec = sqlgraph.NewCreateSpec(usershadow.Table, sqlgraph.NewFieldSpec(usershadow.FieldID, field.TypeInt))
	)
	if value, ok := usc.mutation.Xid(); ok {
		_spec.SetField(usershadow.FieldXid, field.TypeString, value)
		_node.Xid = value
	}
	if value, ok := usc.mutation.KeycloakSub(); ok {
		_spec.SetField(usershadow.FieldKeycloakSub, field.TypeString, value)
		_node.KeycloakSub = value
	}
	if value, ok := usc.mutation.Handle(); ok {
		_spec.SetField(usershadow.FieldHandle, field.TypeString, value)
		_node.Handle = value
	}
	if value, ok := usc.mutation.DisplayName(); ok {
		_spec.SetField(usershadow.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	return _node, _spec
}

// UserShadowCreateBulk is the builder for creating many UserShadow entities in bulk.
type UserShadowCreateBulk struct {
	config
	err      error
	builders []*UserShadowCreate
}

// Save creates the UserShadow entities in the database.
func (uscb *UserShadowCreateBulk) Save(ctx context.Context) ([]*UserShadow, error) {
	if uscb.err != nil {
		return nil, uscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uscb.builders))
	nodes := make([]*UserShadow, len(uscb.builders))
	mutators := make([]Mutator, len(uscb.builders))
	for i := range uscb.builders {
		func(i int, root context.Context) {
			builder := uscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserShadowMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uscb *UserShadowCreateBulk) SaveX(ctx context.Context) []*UserShadow {
	v, err := uscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uscb *UserShadowCreateBulk) Exec(ctx context.Context) error {
	_, err := uscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uscb *UserShadowCreateBulk) ExecX(ctx context.Context) {
	if err := uscb.Exec(ctx); err != nil {
		panic(err)
	}
}
