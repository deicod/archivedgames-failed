package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"errors"
	"strings"
	"time"

	"github.com/deicod/archivedgames/ent/file"
	"github.com/deicod/archivedgames/ent/game"
	"github.com/deicod/archivedgames/internal/s3client"
)

// GetDownloadURL is the resolver for the getDownloadURL field.
func (r *queryResolver) GetDownloadURL(ctx context.Context, fileXid string, ttlSeconds *int) (string, error) {
	f, err := r.Client.File.Query().Where(file.XidEQ(fileXid)).Only(ctx)
	if err != nil {
		return "", err
	}
	if f.Quarantine {
		return "", errors.New("file is quarantined")
	}
	if f.Source != "s3" {
		return "", errors.New("file source is not s3")
	}
	ttl := 120
	if ttlSeconds != nil && *ttlSeconds > 0 {
		ttl = *ttlSeconds
	}
	s3c, err := s3client.New(ctx)
	if err != nil {
		return "", err
	}
	return s3c.PresignGet(ctx, f.Path, time.Duration(ttl)*time.Second)
}

// OpensearchSuggestions is the resolver for the opensearchSuggestions field.
func (r *queryResolver) OpensearchSuggestions(ctx context.Context, q string, platform *game.Platform) ([]string, error) {
	if q == "" {
		return []string{}, nil
	}
	q = strings.TrimSpace(q)
	qb := r.Client.Game.Query().Where(game.TitleContainsFold(q))
	if platform != nil {
		qb = qb.Where(game.PlatformEQ(*platform))
	}
	titles, err := qb.Limit(10).Unique(true).Select(game.FieldTitle).Strings(ctx)
	if err != nil {
		return nil, err
	}
	return titles, nil
}
