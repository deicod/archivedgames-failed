package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"strconv"

	"entgo.io/contrib/entgql"
	"github.com/deicod/archivedgames/ent"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (ent.Noder, error) {
	// IDs are database integer primary keys in this setup.
	i, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	return r.Client.Noder(ctx, i)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]ent.Noder, error) {
	intIDs := make([]int, 0, len(ids))
	for _, s := range ids {
		i, err := strconv.Atoi(s)
		if err != nil {
			return nil, err
		}
		intIDs = append(intIDs, i)
	}
	return r.Client.Noders(ctx, intIDs)
}

// Files is the resolver for the files field.
func (r *queryResolver) Files(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int) (*ent.FileConnection, error) {
	return r.Client.File.Query().Paginate(ctx, after, first, before, last)
}

// Games is the resolver for the games field.
func (r *queryResolver) Games(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int) (*ent.GameConnection, error) {
	return r.Client.Game.Query().Paginate(ctx, after, first, before, last)
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
